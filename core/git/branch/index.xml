<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Branch on My Hugo</title>
    <link>/core/git/branch/</link>
    <description>Recent content in Branch on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Mar 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/git/branch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setup Git Upstream</title>
      <link>/core/git/branch/up-stream/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/git/branch/up-stream/</guid>
      <description>Create An Upstream Repo There are two types of repositories:
bare: repositories do not have a working copy and you can push to them, for example, repositories that you get in github. Bare repositories work as upstreams. non-bare: repositories that you are working on, with a working copy. Repositories that you clone or init are non-bare by default. You can&amp;rsquo;t (by default) and shouldn&amp;rsquo;t push to non-bare repos. Note: technically, you can push to a non-bare repo (see below), but that is not a common practice.</description>
    </item>
    <item>
      <title>Remote Branch</title>
      <link>/core/git/branch/remote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/branch/remote/</guid>
      <description>Checkout from a remote branch # git checkout -b &amp;lt;local-branch-name&amp;gt; &amp;lt;remote&amp;gt;/&amp;lt;remote-branch-name&amp;gt; git checkout -b issue-312 origin/issue-312 in common the remote repo is origin, but it can be any remote repo local-branch-name can be different from remote-branch-name, but you should have reason to do so. Upload to a remote branch # git push -u &amp;lt;remote&amp;gt; &amp;lt;remote-branch-name&amp;gt; git push -u origin issu-312 # later git push </description>
    </item>
    <item>
      <title>Squashing</title>
      <link>/core/git/branch/squashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/branch/squashing/</guid>
      <description>To squash in Git means to combine multiple commits into one.
chatgpt Yes, you can merge a couple of revisions into one revision using Git. This is called squashing commits, and it can help you keep your commit history clean and organized. There are different ways to squash commits, but one of the most common ones is using the interactive rebase feature of Git. You can use the command git rebase -i to open a text editor where you can choose which commits you want to squash.</description>
    </item>
  </channel>
</rss>
