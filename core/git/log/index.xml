<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log on My Hugo</title>
    <link>/core/git/log/</link>
    <description>Recent content in Log on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/git/log/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Common Log Options</title>
      <link>/core/git/log/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/log/options/</guid>
      <description> option description --oneline Shorthand for --pretty=oneline --abbrev-commit used together. --pretty output format, e.g. --pretty=&#39;%h %d %s&#39; -5 latest 5 committs (i.e. first 5 committs in the log output) -p generate patch --name-only list changed file name(s) for each commit --name-status not only names, but also their status, e.g. A-add, M-modify, D-delete Examples git log --pretty=&amp;#39;%h %d %s&amp;#39; </description>
    </item>
    <item>
      <title>Pretty Format</title>
      <link>/core/git/log/pretty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/log/pretty/</guid>
      <description> oneline &amp;lt;hash&amp;gt; &amp;lt;title line&amp;gt; short commit &amp;lt;hash&amp;gt; Author: &amp;lt;author&amp;gt; &amp;lt;title line&amp;gt; medium commit &amp;lt;hash&amp;gt; Author: &amp;lt;author&amp;gt; Date: &amp;lt;author date&amp;gt; &amp;lt;title line&amp;gt; &amp;lt;full commit text&amp;gt; Format String %n new line %h abbreviated commit hash, %H commit hash %an author name, %ad author date, %as author date short (YYYY-MM-DD) %cn committer name, &amp;hellip; %d ref name %s subject %b body </description>
    </item>
    <item>
      <title>Range</title>
      <link>/core/git/log/range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/log/range/</guid>
      <description>By Revision rev1..rev2 revision from rev1 (excluded) to rev2 (included)
rev~ and rev^ Suffix ~ to a revision parameter means the parent of that commit object. rev~&amp;lt;n&amp;gt; means the n-th generation ancestor of rev.
Suffix ^ also means the parent of the commit object, so rev^ is the same with rev~. However, rev^&amp;lt;n&amp;gt; means the n-th parent if rev has multiple parents, such as a merging commit.
rev^..rev Show only rev, i.</description>
    </item>
    <item>
      <title>Recipes</title>
      <link>/core/git/log/recipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/log/recipes/</guid>
      <description>-S -S &amp;lt;string&amp;gt; Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file.
Similar options
-G &amp;lt;regex&amp;gt; --pickaxe-all When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change. --pickaxe-regex treat string in -S as extended regex. Interested part in a file -L&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;:&amp;lt;file&amp;gt; -L:&amp;lt;funcname&amp;gt;:&amp;lt;file&amp;gt; Trace the evolution of the line range given by &amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;, or by the function name regex &amp;lt;funcname&amp;gt;, within the &amp;lt;file&amp;gt;.</description>
    </item>
    <item>
      <title>Show Branches in Graph</title>
      <link>/core/git/log/graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/log/graph/</guid>
      <description>Option -graph adds a nice little ASCII graph showing your branch and merge history:
$ git log --oneline --graph * dc9233c (HEAD -&amp;gt; master) merge branch chinese into master |\ | * 6be89ec (chinese) rev.3 in branch chinese * | 63b80a9 rev.4 in master, 2 changes with one conflict with rev.3 in branch chinese |/ * 7c69103 rev.2 add a line in sample.txt * 3a17ac5 rev.1 init </description>
    </item>
    <item>
      <title>Show Commits That Touch A Path</title>
      <link>/core/git/log/path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/log/path/</guid>
      <description>Without path arguments, git log command shows information of each commits in sequence, with latest commit first.
git log &amp;lt;options&amp;gt; where options can be use to pick the range of commits, the content of information or format of dispaly.
If we add &amp;lt;path&amp;gt; argument, log shows commits that touch the &amp;lt;path&amp;gt;. The argument &amp;lt;path&amp;gt; can be a file or a directory.
git log &amp;lt;options&amp;gt; [--] &amp;lt;path&amp;gt; Common options -p show file(s) diff, or patch as well --name-status show changed file(s), make sense only if the path is a directory --full-diff by default, -p option lets log shows only items that &amp;lt;path&amp;gt; includes, with --full-diff, log shows all files in each commits that touch &amp;lt;path&amp;gt;.</description>
    </item>
  </channel>
</rss>
