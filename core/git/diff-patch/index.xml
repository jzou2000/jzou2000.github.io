<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diff &amp; Patch on My Hugo</title>
    <link>/core/git/diff-patch/</link>
    <description>Recent content in Diff &amp; Patch on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/git/diff-patch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>External Tree</title>
      <link>/core/git/diff-patch/externals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/diff-patch/externals/</guid>
      <description>Sometimes we want to diff and patch an external tree, i.e. not in git, for example, we have folked a repo, but we want to keep updated with the original repo.
this is different from branch, which is in the same git repo. We can use posix utility diff and patch to achieve the purpose.
Compare two trees (folders recursively) and generate patch file. The patch file is the command (explained by patch) that convert .</description>
    </item>
    <item>
      <title>gitdiff</title>
      <link>/core/git/diff-patch/gitdiff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/diff-patch/gitdiff/</guid>
      <description>Common options options Description -p show diff of files in each commit &amp;ndash;name-only Show only names of changed files. &amp;ndash;name-status Show only names and status of changed files. &amp;ndash;ignore-cr-at-eol Ignore carriage-return at the end of line when doing a comparison. -b, &amp;ndash;ignore-space-change Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent. -w, &amp;ndash;ignore-all-space Ignore whitespace when comparing lines.</description>
    </item>
    <item>
      <title>Patch</title>
      <link>/core/git/diff-patch/patch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/diff-patch/patch/</guid>
      <description>chatgpt To generate a patch from a branch, you need to use the git format-patch command. This command will create one or more files that contain the changes made in the branch, which you can then send to someone else or apply to another branch. You also need to specify which commits you want to include in the patch, and which branch you want to compare with. For example, if you want to create a patch for all the commits in a branch named feature/new-ui that are not in the master branch, you can use this command:</description>
    </item>
  </channel>
</rss>
