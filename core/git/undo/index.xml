<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>undo on My Hugo</title>
    <link>/core/git/undo/</link>
    <description>Recent content in undo on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/git/undo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amend - Update the Latest Commit</title>
      <link>/core/git/undo/amend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/undo/amend/</guid>
      <description>When:
commit too early modify commit description $ git commit -m &amp;#39;some description&amp;#39; $ git add forgotten_files $ git commit --amend </description>
    </item>
    <item>
      <title>Discard After a Commit</title>
      <link>/core/git/undo/discard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/undo/discard/</guid>
      <description>If you want to discard all the changes you made after a certain commit, you can use the command git reset --hard with the commit ID. This will reset your current branch to the specified commit and erase any later commits from the history.
For example, if you want to revert to commit 0ad5a7a6, you can run:
git reset --hard 0ad5a7a6 Note:
use with careful, it deletes permanently. </description>
    </item>
    <item>
      <title>Restore</title>
      <link>/core/git/undo/restore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/undo/restore/</guid>
      <description>Before Commit If you modified a file or a path, which is not staged yet, and you want to restore it
$ git restore the_file If the file is staged, you should first unstage it
$ git restore --staged the_file After Commit If you want to restore a single file or a folder to an old version, you can use the git checkout command with the commit ID and the file or folder path.</description>
    </item>
    <item>
      <title>Revert</title>
      <link>/core/git/undo/revert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/git/undo/revert/</guid>
      <description>If you want to undo a specific commit, but keep the later commits, you can use the git revert command with the commit ID. This will create a new commit that reverses the changes made by the original commit. For example, if you want to undo commit 5798ee7c, you can run:
git revert 5798ee7c This will not affect the history of your branch, but it will add a new commit that undoes the previous one.</description>
    </item>
  </channel>
</rss>
