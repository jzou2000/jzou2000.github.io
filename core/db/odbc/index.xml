<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ODBC on My Hugo</title>
    <link>/core/db/odbc/</link>
    <description>Recent content in ODBC on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 May 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/db/odbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ODBC API Notes</title>
      <link>/core/db/odbc/odbc-api-notes/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-api-notes/</guid>
      <description>Return Length Unit of length parameters (both input and output) of ODBC API
if the field is determined to be a string, the unit is character SQLBrowseConnect, SQLConnect, SQLDriverConnect SQLColumns, SQLProcedureColumns, SQLProcedures, SQLSpecialColumns, SQLTables SQLColumnPrivileges, SQLForeignKeys, SQLPrimaryKeys, SQLStatistics, SQLTablePrivileges SQLDataSources SQLDescribeCol SQLExecDirect, SQLPrepare, SQLNativeSql SQLGetCursorName, SQLSetCursorName SQLGetDescRec SQLGetDiagRec SQLGetTypeInfo (return a resultset) otherwise (even the buffer actually holds a string) the unit is byte SQLColAttribute SQLDrivers (description length is in char, attribute length is in byte) SQLGetConnectAttr, SQLSetConnectAttr SQLGetDescField, SQLSetDescField SQLGetDiagField SQLGetInfo: exception: iodbc returns text length in char SQLGetStmtAttr, SQLSetStmtAttr (special: SQL_NTS, SQL_LEN_BINARY_ATTR, SQL_IS_POINTER, SQL_IS_INTEGER, SQL_IS_UINTEGER ) the returned length of text excludes the terminal null character, however the buffer should be able to hold the terminal null, otherwise truncation happens.</description>
    </item>
    <item>
      <title>ODBC Attributes</title>
      <link>/core/db/odbc/odbc-attr/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-attr/</guid>
      <description>Environ Attributes Attribute Version Type Description SQL_ATTR_CONNECTION_POOLING 3.8 SQLUINTEGER SQL_CP_OFF (default)SQL_CP_ONE_PER_DRIVERSQL_CP_ONE_PER_HENVSQL_CP_DRIVER_AWARE SQL_ATTR_CP_MATCH 3.0 SQLUINTEGER SQL_CP_STRICT_MATCH (default)SQL_CP_RELAXED_MATCH SQL_ATTR_ODBC_VERSION 3.0 SQLUINTEGER SQL_OV_ODBC3_80SQL_OV_ODBC3 SQL_OV_ODBC2 SQL_ATTR_OUTPUT_NTS 3.0 SQLUINTEGER SQL_TRUE (default) Connect Attributes Attribute Version Type Description SQL_ATTR_ACCESS_MODE 1.0 SQLUINTEGER SQL_MODE_READ_WRITE (default)SQL_MODE_READ_ONLY SQL_ATTR_ASYNC_DBC_EVENT 3.3 SQLPOINTER event handler SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE 3.8 SQLUINTEGER SQL_ASYNC_DBC_ENABLE_OFF (default)SQL_ASYNC_DBC_ENABLE_ON SQL_ATTR_ASYNC_DBC_PCALLBACK 3.8 SQLPOINTER context structure SQL_ATTR_ASYNC_DBC_PCONTEXT 3.3 SQLPOINTER context structure SQL_ATTR_ASYNC_ENABLE 3.0 SQLULEN SQL_ASYNC_ENABLE_OFF (default)SQL_ASYNC_ENABLE_ON SQL_ATTR_AUTO_IPD 3.0 SQLUINTEGER SQL_TRUESQL_FALSE SQL_ATTR_AUTOCOMMIT 1.0 SQLUINTEGER SQL_AUTOCOMMIT_OFFSQL_AUTOCOMMIT_ON SQL_ATTR_CONNECTION_DEAD 3.</description>
    </item>
    <item>
      <title>Catalog Functions - ODBC vs JDBC</title>
      <link>/core/db/odbc/catalog/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/catalog/</guid>
      <description>Catalog Functions - odbc vs jdbc Catalog ODBC JDBC Comment Schemas getSchemas Tables SQLTables getTables Columns SQLColumns getTables PrimaryKeys SQLPrimaryKeys getTables ForeignKeys SQLForeignKeys getTables Catalogs ResultSet getCatalogs()
TABLE_CAT Schemas ResultSet getSchemas()
TABLE_SCHEM TABLE_CATALOG TableTypes ResultSet getTableTypes()
TABLE_TYPE type values
TABLE VIEW SYSTEM TABLE GLOBAL TEMPORARY LOCAL TEMPORARY ALIAS SYNONYM Tables SQLTables getTables Input catalog catlog schema schemaPattern table tablePattern tableTypeCSV types[] Output TABLE_CAT * TABLE_SCHEM * TABLE_NAME * TABLE_TYPE * REMARKS * TYPE_CAT TYPE_SCHEMA TYPE_NAME SELF_REFERENCING_COL_NAME REF_GENERATION Columns SQLColumns getColumns Input catalog catlog schema schemaPattern table tablePattern column columnPattern Output TABLE_CAT * TABLE_SCHEM * TABLE_NAME * COLUMN_NAME * DATA_TYPE * TYPE_NAME * COLUMN_SIZE * BUFFER_LENGTH * DECIMAL_DIGITS * NUM_PREC_RADIX * NULLABLE * REMARKS * COLUMN_DEF * SQL_DATA_TYPE * SQL_DATETIME_SUB * CHAR_OCTET_LENGTH * ORDINAL_POSITION * IS_NULLABLE * SCOPE_CATALOG SCOPE_SCHEMA SCOPE_TABLE SOURCE_DATA_TYPE IS_AUTOINCREMENT IS_GENERATEDCOLUMN PrimaryKeys SQLPrimaryKeys getPrimaryKeys Input catalog catlog schema schemaPattern table tablePattern Output TABLE_CAT * TABLE_SCHEM * TABLE_NAME * COLUMN_NAME * KEY_SEQ * PK_NAME * ForeignKeys SQLForeignKeys getCrossReference getImportedKeys getExportedKeys Input pk_catalog * catlog * pk_schema * schema * pk_table * table * fk_catalogtable * fk_schema * fk_table * Output PKTABLE_CAT * * PKTABLE_SCHEM * * PKTABLE_NAME * * PKCOLUMN_NAME * FKTABLE_CAT * * FKTABLE_SCHEM * * FKTABLE_NAME * * FKCOLUMN_NAME * * KEY_SEQ * * UPDATE_RULE * * DELETE_RULE * * FK_NAME * * PK_NAME * * DEFERRABILITY * * ODBC Catalog Function Arguments All ODBC catalog functions accept name filters on their resultset.</description>
    </item>
    <item>
      <title>ODBC API Cheatsheet</title>
      <link>/core/db/odbc/odbc-api/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-api/</guid>
      <description>ODBC API Unicode Version Description SQLAllocConnect 1.0 deprecated by SQLAllocHandle SQLAllocEnv 1.0 deprecated by SQLAllocHandle SQLAllocHandle 3.0 allocates an environment, connection, statement, or descriptor handle. SQLAllocStmt 1.0 deprecated by SQLAllocHandle SQLBindCol 1.0 binds application data buffers to columns in the result set. SQLBindParameter 2.0 binds a buffer to a parameter marker in an SQL statement SQLBrowseConnect * 1.0 supports an iterative method of discovering and enumerating the attributes and attribute values required to connect to a data source SQLBulkOperations 3.</description>
    </item>
    <item>
      <title>ODBC Data Types</title>
      <link>/core/db/odbc/odbc-data-type/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-data-type/</guid>
      <description>ODBC Data Types SQL Types name value SQL_CHAR 1 SQL_VARCHAR 12 SQL_LONGVARCHAR -1 SQL_WCHAR -8 SQL_WVARCHAR -9 SQL_WLONGVARCHAR -10 SQL_DECIMAL 3 SQL_NUMERIC 2 SQL_BIT -7 SQL_TINYINT -6 SQL_SMALLINT 5 SQL_INTEGER 4 SQL_BIGINT -5 SQL_FLOAT 6 SQL_DOUBLE 8 SQL_REAL 7 SQL_BINARY -2 SQL_VARBINARY -3 SQL_LONGVARBINARY -4 SQL_DATE 9 SQL_TIME 10 SQL_TIMESTAMP 11 SQL_TYPE_DATE 91 SQL_TYPE_TIME 92 SQL_TYPE_TIMESTAMP 93 SQL_GUID -11 SQL_INTERVAL_YEAR 101 SQL_INTERVAL_MONTH 102 SQL_INTERVAL_DAY 103 SQL_INTERVAL_HOUR 104 SQL_INTERVAL_MINUTE 105 SQL_INTERVAL_SECOND 106 SQL_INTERVAL_YEAR_TO_MONTH 107 SQL_INTERVAL_DAY_TO_HOUR 108 SQL_INTERVAL_DAY_TO_MINUTE 109 SQL_INTERVAL_DAY_TO_SECOND 110 SQL_INTERVAL_HOUR_TO_MINUTE 111 SQL_INTERVAL_HOUR_TO_SECOND 112 SQL_INTERVAL_MINUTE_TO_SECOND 113 SQL C Types name value SQL_C_CHAR 1 SQL_C_WCHAR -8 SQL_C_NUMERIC 2 SQL_C_BIT -7 SQL_C_TINYINT -6 SQL_C_STINYINT -26 SQL_C_UTINYINT -28 SQL_C_SHORT 5 SQL_C_SSHORT -15 SQL_C_USHORT -17 SQL_C_LONG 4 SQL_C_SLONG -16 SQL_C_ULONG -18 SQL_C_SBIGINT -25 SQL_C_UBIGINT -27 SQL_C_FLOAT 7 SQL_C_DOUBLE 8 SQL_C_BINARY -2 SQL_C_DATE 9 SQL_C_TIME 10 SQL_C_TIMESTAMP 11 SQL_C_TYPE_DATE 91 SQL_C_TYPE_TIME 92 SQL_C_TYPE_TIMESTAMP 93 SQL_C_GUID -11 SQL_C_INTERVAL_YEAR 101 SQL_C_INTERVAL_MONTH 102 SQL_C_INTERVAL_DAY 103 SQL_C_INTERVAL_HOUR 104 SQL_C_INTERVAL_MINUTE 105 SQL_C_INTERVAL_SECOND 106 SQL_C_INTERVAL_YEAR_TO_MONTH 107 SQL_C_INTERVAL_DAY_TO_HOUR 108 SQL_C_INTERVAL_DAY_TO_MINUTE 109 SQL_C_INTERVAL_DAY_TO_SECOND 110 SQL_C_INTERVAL_HOUR_TO_MINUTE 111 SQL_C_INTERVAL_HOUR_TO_SECOND 112 SQL_C_INTERVAL_MINUTE_TO_SECOND 113 C Type Identifier vs C Types C type identifier ODBC C typedef C type SQL_C_CHAR SQLCHAR * unsigned char * SQL_C_WCHAR SQLWCHAR * wchar_t * SQL_C_SSHORT SQLSMALLINT short int SQL_C_USHORT SQLUSMALLINT unsigned short int SQL_C_SLONG SQLINTEGER long int SQL_C_ULONG SQLUINTEGER unsigned long int SQL_C_FLOAT SQLREAL float SQL_C_DOUBLE SQLDOUBLE, SQLFLOAT double SQL_C_BIT SQLCHAR unsigned char SQL_C_STINYINT SQLSCHAR signed char SQL_C_UTINYINT SQLCHAR unsigned char SQL_C_SBIGINT SQLBIGINT _int64[h] SQL_C_UBIGINT SQLUBIGINT unsigned _int64[h] SQL_C_BINARY SQLCHAR * unsigned char * SQL_C_BOOKMARK BOOKMARK unsigned long int[d] SQL_C_VARBOOKMARK SQLCHAR * unsigned char * C structures Note: size on Windows</description>
    </item>
    <item>
      <title>ODBC Driver Manager</title>
      <link>/core/db/odbc/odbc-driver-manager/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-driver-manager/</guid>
      <description>Enable DM/Driver log unixODBC odbcinst.ini
[ODBC] Trace = yes TraceFile = /path/to/traceFile.log iODBC odbc.ini
[ODBC] Trace = 1 TraceFile = /path/to/traceFile.log # optional Debug = 1 DebugFile = /path/to/debugFile.log Simba Driver simab.${drier}.ini
[Driver] LogLevel=6 LogPath=/path # file name is, e.g. XM_driver.log EnableTransactions=0 Log Level
disable fatal - very severe error events that might crash errors - driver can still run warnings - potentially harmful situations info - general information debug - details for debugging trace - everything Detected DM from Simba driver log Here is the first few lines when the loglevel is 4+</description>
    </item>
    <item>
      <title>Build unixODBC from source</title>
      <link>/core/db/odbc/build-unixodbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/build-unixodbc/</guid>
      <description>Get Source The source of the latest unixODBC can be found on its official website. At the writing moment, the latest version is 2.3.9.
get package from official site (you need the version number) wget http://www.unixodbc.org/unixODBC-2.3.6.tar.gz get from a git clone (tags start from 2.3.2) git clone https://github.com/lurcher/unixODBC.git earlier version, e.g. v2.3.1 can be found at linuxfromscratch Build Script mkuo.sh UnixODBC supports shadow-building, which means you can configure/build it from a folder other than its source.</description>
    </item>
    <item>
      <title>Code Study - unixODBC</title>
      <link>/core/db/odbc/unixodbc-code-study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/unixodbc-code-study/</guid>
      <description>How Log Works config - __handles.c:__alloc_env() SQLGetPrivateProfileString: odbcinst.ini ODBC.Trace [1Y].*|ON dm_log_open( &amp;#34;ODBC&amp;#34;, tracing_file, 1/0 ); log/action __info.c: dm_log_open(prog_name, file_name, pid_logging); // only save log info dm_log_write(file, line, type, severity, message); // do actual log file write Conclusion unixodbc use odbc.ini, defined by $ODBCINI of full path, for most configuration trace setiings defined by odbcinst.ini [ODBC] Trace = Yes # alternative: 1, ON TraceFile = /full/path/to/file # optional # TracePid = Yes odbcinst.</description>
    </item>
    <item>
      <title>Data Convertion: SQL to C</title>
      <link>/core/db/odbc/sql-to-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/sql-to-c/</guid>
      <description> SQL Types char wchar tiny short long bigint float double numeric binary date time stamp guid CHAR X o o o o o o o o o o o o o VARCHAR X o o o o o o o o o o o o o LONGVARCHAR X o o o o o o o o o o o o o WCHAR o X o o o o o o o o o o o o WVARCHAR o X o o o o o o o o o o o o WLONGVARCHAR o X o o o o o o o o o o o o TINY o o X o o o o o o o SMALL o o o X o o o o o o INTEGER o o o o o o o o o o BIGINT o o o o o X o o o o REAL o o o o o o X o o o FLOAT o o o o o o o X o o DOUBLE o o o o o o o X o o DECIMAL X o o o o o o o o o NUMERIC X o o o o o o o o o BINARY o o X VARBINARY o o X LONGVARBINARY o o X TYPE_DATE o o o X o TYPE_TIME o o o X o TYPE_TIMESTAMP o o o o o X GUID o o o X o support X default (SQL_C_DEFAULT) </description>
    </item>
    <item>
      <title>Get DM Information</title>
      <link>/core/db/odbc/dm-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/dm-info/</guid>
      <description>unixODBC nm libodbc.so ... r id_string.1 ... t __info_as_string t __find_lib_name b single_lib_name Note: all symbols are &amp;ldquo;local&amp;rdquo;, i.e. not visible to other modules
t: text b: bss (0 initialized) r: read-only source
config.h PACKAGE_NAME &amp;#34;unixODBC&amp;#34; PACKAGE_STRING &amp;#34;unixODBC 2.3.8&amp;#34; PACKAGE_VERSION &amp;#34;2.3.8&amp;#34; </description>
    </item>
    <item>
      <title>ODBC Configures</title>
      <link>/core/db/odbc/odbc-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-config/</guid>
      <description>Windows In spite of using the application ODBC Administrator to config ODBC drivers and DSN, you can config ODBC directly in registry.
Registry /HKEY_LOCAL_MACHINE/SOFTWARE/ODBC ODBC.INI/ ODBC Data Sources/ - list of DSN/driver pairs mydsn - DSN name Driver=mydriver - name of driver, match ODBCINST.INI Description=text - description of this DSN other-key=value - driver dependent, e.g. db path, uid, pwd ODBCINST.INI/ ODBC Drivers - list of installed drivers mydriver=installed - every driver has a record name=installed mydriver/ - driver info: location and setup Driver=path/to/dll - pathname to driver dll Setup=path/to/dll - pathname to driver setup dll (may the same with Driver) Description=text - description of the driver for simba drivers, also define \HKEY_LOCAL_MACHINE\SOFTWARE\Simba mydriver/Driver/ ErrorMessagesPath=path/to/ErrorMessages Note:</description>
    </item>
    <item>
      <title>ODBC Return Code and Common Constants</title>
      <link>/core/db/odbc/odbc-const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-const/</guid>
      <description>Return Code Name Value Description SQL_SUCCESS 0 SQL_SUCCESS_WITH_INFO 1 SQL_STILL_EXECUTING 2 SQL_ERROR -1 SQL_INVALID_HANDLE -2 SQL_NEED_DATA 99 SQL_NO_DATA 100 ver&amp;gt;3.0 SQL_NO_DATA_FOUND 100 alias of SQL_NO_DATA, in sqlext.h Note: in sql.h define SQL_SUCCEEDED(rc) (((rc) &amp;amp; (~1)) == 0) ODBC SQLSTATE Special Length Name Value Description SQL_NULL_DATA -1 value is null SQL_DATA_AT_EXEC -2 value will be given at execute time SQL_NTS -3 the string is null-terminated SQL_NO_TOTAL -4 in SQLGetData, total data length is not available, in sqlext.</description>
    </item>
    <item>
      <title>SQLBindCol and SQLBindParamter</title>
      <link>/core/db/odbc/bind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/bind/</guid>
      <description>SQLBindCol SQLBindParameter Data Type Description StatementHandle StatementHandle SQLHSTMT statement handle ColumnNumber ParameterNumber SQLUSMALLINT 1-based column/parameter number InputOutputType SQLSMALLINT input/output/input-output TargetType ValueType SQLSMALLINT c-type-id ParameterType SQLSMALLINT sql-type-id ColumnSize SQLULEN DecimalDigits SQLSMALLINT aka scale TargetValuePtr ParameterValuePtr SQLPOINTER buffer to receive(col)/offer(param) value BufferLength BufferLength SQLLEN size of buffer StrLen_or_IndPtr StrLen_or_IndPtr SQLLEN * input/output actual data length StrLen_or_IndPtr length of data SQL_NTS SQL_NULL_DATA SQL_DATA_AT_EXEC SQL_LEN_DATA_AT_EXEC macro SQL_COLUMN_IGNORE Extra statement attributes Attribute Type Description SQL_ATTR_ROW_BIND_TYPE SQLULEN SQL_BIND_BY_COLUMN(0, default) for column-wise or row-size for row-wise SQL_ATTR_ROW_ARRAY_SIZE SQLULEN array size (of rows), default 1 SQL_ATTR_ROWS_FETCHED_PTR SQLULEN* in last fetch (and like), number of rows that are actually fetched SQL_ATTR_ROW_STATUS_PTR SQLUSMALLINT* an array of SQLUSMALLINT for each row of fetched SQL_ATTR_PARAMSET_SIZE SQLULEN array size (of parameters), default 1 SQL_ATTR_PARAMS_PROCESSED_PTR SQLULEN* number of rows of processed parameter Row status array (SQLBindCol) Value Description SQL_ROW_SUCCESS The row was successfully fetched and has not changed since it was last fetched from this result set.</description>
    </item>
  </channel>
</rss>
