<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on My Hugo</title>
    <link>/core/shell/bash/</link>
    <description>Recent content in Bash on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/shell/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Array and Dictionary</title>
      <link>/core/shell/bash/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/array/</guid>
      <description>####### array declare -a w w[1]=hello w[2]=good echo ${w[1]} ####### dictionary declare -A d d[good]=day d[bad]=night echo ${d[good]} brace expansion example result description ${!var[*]} ${!w[*]} 1 2 index of array $var that have set ${!var[@]} ${!w[@]} 1 2 index of array $var that have set ${!var[*]} ${!d[*]} good bad key of dictionary $var that have set ${!var[@]} ${!d[@]} good bad key of dictionary $var that have set ${#var[*]} ${#w[*]} 2 length of array/dictionary $var ${#var[@]} ${#d[@]} 2 length of array/dictionary $var </description>
    </item>
    <item>
      <title>Bash Special Variables</title>
      <link>/core/shell/bash/special-var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/special-var/</guid>
      <description> var description $0 name of script executing $N position option Nth, N=1,2,3,.. $@ all arguments $* all arguments (joined by $IFS) $# number of arguments $? return code of previous command $! pid of previous background command $$ pid of current shell $- options of current shell $_ last argument of last command Note:
kill -0 pid doesn&amp;rsquo;t send signal to pid, used to check if pid exists (return 0 if existing) </description>
    </item>
    <item>
      <title>Debug Bash Script</title>
      <link>/core/shell/bash/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/debug/</guid>
      <description>Use Bash Internal Command set option description -v turn on verbose mode -x print command before execute it -o pipefail check pipeline failure Tips:
put set -x at head of the script to trace all commands wrap the interested section set -xv # interested section set +xv use in launch shell without modifying the target script bash -x script.sh Other Useful Tips insert echo at interested location to print info Use -n flag to check syntax without executing bash -n script.</description>
    </item>
    <item>
      <title>getopts</title>
      <link>/core/shell/bash/getopts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/getopts/</guid>
      <description>Template to get command-line options
function usage { cat &amp;lt;&amp;lt; EOF usage: ... EOF exit 1 } function fallback { # default variable values : ${_wks:=$HOME} } OPTIND=1 while getopts &amp;#34;h?yw:i:v:&amp;#34; opt; do case &amp;#34;$opt&amp;#34; in h|\?) usage;; y) DRY=echo;; w) _wks=$OPTARG;; i) _agent=$OPTARG;; v) _v=$OPTARG;; esac done shift $((OPTIND-1)) fallback # do actual work </description>
    </item>
    <item>
      <title>Here Doc</title>
      <link>/core/shell/bash/heredoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/heredoc/</guid>
      <description>Simple case
cat &amp;lt;&amp;lt; EOF some text more text EOF Use in pipes
cat &amp;lt;&amp;lt; EOF | some text more text EOF grep some or alternatively
cat &amp;lt;&amp;lt; EOF | grep some some text more text EOF </description>
    </item>
    <item>
      <title>Indirect Varaiable</title>
      <link>/core/shell/bash/var-indirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/var-indirect/</guid>
      <description>Indirect variable is a variable that its name is the value of another variable.
#! /bin/bash # demonstrate the usage of indrect variables # ${!F} value of a variable that its name is value of variable F # A=aloha A1=a1 B=banana C= D=delta function exports { for f in $*; do echo $f=${!f} export $f=${!f} done } exports A A1 B C D # ${!A*} means list of names of all variables that have name start with A echo A-all=${!</description>
    </item>
    <item>
      <title>String Operation</title>
      <link>/core/shell/bash/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/string/</guid>
      <description>val=wks/perf/perf_2019.sln v2=abcABC123ABCabc os=linux brace expansion example result description ${#var} ${#val} 22 length of string $var ${var:position} ${val:9} perf_2019.sln substring from position (0-based) to end ${var:pos:leng} ${val:9:4} perf substring from pos of length leng, negative length from right ${var#pattern} ${val#*/} perf/perf_2019.sln remove shortest match of pattern from front of $var ${var##pattern} ${val##*/} perf_2019.sln remove longest match of pattern from front of $var ${var%pattern} ${val%/*} wks/perf remove shortest match of pattern from back of $var ${var%%pattern} ${val%%/*} wks remove longest match of pattern from back of $var ${var/pat/replacement} ${val/_2019/_vs2019} wks/perf/perf_vs2019.</description>
    </item>
    <item>
      <title>Variable Transform</title>
      <link>/core/shell/bash/transform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bash/transform/</guid>
      <description>os=linux osx=darwin osb= brace expansion example result c equivalent description ${var:-word} ${os:-aix} linux var ? var : word $var or word ${osb:-aix} aix (osb is null) ${osc}:-aix} aix (osc is unset) ${var:=word} ${os:=aix} linux var = var ? var : word $var or word (with assignment) ${osb:=aix} aix in addition osb=aix ${var:+word} ${os:+aix} aix var ? word : null word if $var else null ${osb:+aix} (osb is null) ${var:?word} ${osb:?aix} var ?</description>
    </item>
  </channel>
</rss>
