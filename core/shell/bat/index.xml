<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmd/bat on My Hugo</title>
    <link>/core/shell/bat/</link>
    <description>Recent content in cmd/bat on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/shell/bat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>/core/shell/bat/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bat/overview/</guid>
      <description>Online References TryToProgam - Batch file Microsoft Learn - cmd TutorialsPoint - Batch Script </description>
    </item>
    <item>
      <title>Command-line Arguments</title>
      <link>/core/shell/bat/argv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bat/argv/</guid>
      <description>Command-line arguments use different syntax from regular variables
%0 - the script itself %* - all command-line args (i.e. sys.argv[1:] in python) %1 - the first command-line arg, and so on upto %9 @echo off :: set echo all args (%*) for %%x in (%*) do ( echo %%x) echo arg 0 (%0) echo arg 1 (%1) echo arg 2 (%2) shift echo after shift arg 1 (%1) :: following command print an empty line :: in fact character : can be replaced by and of .</description>
    </item>
    <item>
      <title>Condition and Branch</title>
      <link>/core/shell/bat/if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bat/if/</guid>
      <description>Syntax if condition (stmts) [else (stmts)] the parenthese is optional if the statement is a single command Example @echo off set a=hello if defined a (echo a is defined as %a%) else (echo a is not defined) if defined b (echo b is defined as %b%) else (echo b is not defined) echo. Result
C:\tmp\bat.ex&amp;gt;if.bat a is defined as hello b is not defined </description>
    </item>
    <item>
      <title>Loop</title>
      <link>/core/shell/bat/loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bat/loop/</guid>
      <description>Syntax for %%x in (list) do (commands) parenthese is optional if there&amp;rsquo;s only one command parenthese around list is required list can be literal or a variable, separated by space, comma or semi-comma Example @echo off echo loop argv: (%*) for %%x in (%*) do echo %%x set str=hello, world; c:\windows; &amp;#34;c:\program files&amp;#34; echo loop str=(%str%) for %%x in (%str%) do echo str token: %%x echo loop literal string a,b, c;d for %%x in (a,b, c;d) do echo loop literal: %%x Result</description>
    </item>
    <item>
      <title>Variables and String</title>
      <link>/core/shell/bat/var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/shell/bat/var/</guid>
      <description>Define and Reference set mystr=hello, world echo %mystr% Don&amp;rsquo;t put spaces between variable and equal sign = unlike bash, anything after = is the value of the variable reference the variable by putting % at both ends of the variable (bash syntax ${var}) special cases command-line arguments: %* %0 %1 %2 ... loop iterator variable: %%x Examples str.bat
@echo off set mystr=hello, world echo %mystr% :: string left set newstr=left 5 (%mystr:~0,5%) echo %newstr% :: string right set newstr=right 7 (%mystr:~-7%) echo %newstr% :: string replace set newstr=replace %mystr:l=L% echo %newstr% The result</description>
    </item>
  </channel>
</rss>
