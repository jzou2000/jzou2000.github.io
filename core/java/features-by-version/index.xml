<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Features by Version on My Hugo</title>
    <link>/core/java/features-by-version/</link>
    <description>Recent content in Features by Version on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/java/features-by-version/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>v7</title>
      <link>/core/java/features-by-version/v7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/java/features-by-version/v7/</guid>
      <description>Strings in switch statement. Binary integer literals. Allowing underscores in numeric literals. Catching multiple exception types and rethrowing exceptions with improved type checking. Automatic resource management in try-statement. Improved type inference for generic instance creation, aka the diamond operator &amp;lt;&amp;gt;. Simplified varargs method declaration. Strings in switch statement String v = &amp;#34;Hello&amp;#34;; switch (v) { case &amp;#34;Hello&amp;#34;: action_a(); break; case &amp;#34;workd&amp;#34;: action_b(); break; } Binary Integer Literals with Prefix &amp;ldquo;0b&amp;rdquo; and Underscore in Numeric Literals int number1 = 0b01010000101000101101000010100010; int number2 = 0b0101_0000_1010_0010_1101_0000_1010_0010; int number3 = 2_123_456; // break the digits with underscore Catching Multiple Exception Types and Rethrowing Exceptions with Improved Type Checking try { .</description>
    </item>
    <item>
      <title>v8</title>
      <link>/core/java/features-by-version/v8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/java/features-by-version/v8/</guid>
      <description>Reference
Quick Overview of Java 8 Features Baeldung Java Versions and Features Java8 Features with Examples Overview forEach() method in Iterable interface default and static methods in Interfaces Functional Interfaces and Lambda Expressions Java Stream API for Bulk Data Operations on Collections Java Time API Collection API improvements Concurrency API improvements Java IO improvements forEach List&amp;lt;Integer&amp;gt; myList = new ArrayList&amp;lt;Integer&amp;gt;(); //... myList.forEach(new Consumer&amp;lt;Integer&amp;gt;() { public void accept(Integer t) { System.out.println(&amp;#34;forEach anonymous class Value::&amp;#34;+t); } }); Interface Default and Static Methods Before Java 8, interfaces could have only public abstract methods.</description>
    </item>
    <item>
      <title>v9</title>
      <link>/core/java/features-by-version/v9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/java/features-by-version/v9/</guid>
      <description>Reference
Java 9 Features with Examples Java 9 REPL Factory Methods for Immutable Collections List immutableEmptyList = List.of(); List immutableList = List.of(&amp;#34;one&amp;#34;,&amp;#34;two&amp;#34;,&amp;#34;three&amp;#34;); Map immutableMap = Map.of(1, &amp;#34;one&amp;#34;, 2, &amp;#34;two&amp;#34;, 3, &amp;#34;three&amp;#34;) immutableMap ==&amp;gt; {2=two, 3=three, 1=one} Private methods in Interfaces public interface Card{ private Long createCardID(){ // Method implementation goes here. } private static void displayCardDetails(){ // Method implementation goes here. } } Java 9 Module System Process API Improvements ProcessHandle currentProcess = ProcessHandle.</description>
    </item>
  </channel>
</rss>
