<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Misc on My Hugo</title>
    <link>/core/c&#43;&#43;/misc/</link>
    <description>Recent content in Misc on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jun 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/c++/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Name Demangling</title>
      <link>/core/c&#43;&#43;/misc/c&#43;&#43;-demangling/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/c&#43;&#43;-demangling/</guid>
      <description>c++filt
Usage c++filt symbol nm libmy.a | c++filt | less </description>
    </item>
    <item>
      <title>Clang&#43;&#43; Issues</title>
      <link>/core/c&#43;&#43;/misc/clang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/clang/</guid>
      <description>Clang++ doesn&amp;rsquo;t support
std::quick_exit, std::at_quick_exit </description>
    </item>
    <item>
      <title>Compiler Predefined Macro __cplusplus</title>
      <link>/core/c&#43;&#43;/misc/__cplusplus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/__cplusplus/</guid>
      <description>__cplusplus defines the C++ standard, in format of yyyymm, e.g.
__cplusplus C++ standard 199711L C++98 201103L C++11 201402L C++14 201703L C++17 202002L C++20 unless specified -std=c++11 or any new standard, most compiler (even they actually support new features, e.g. vsc or clang), __cplusplus default value is 199711L To let VisualStudio C++ update actual __cplusplus, you need to set /Zc:__cplusplus option. To change the default c++ standard (c++14 by default), for example c++17, you need also set /std:c++17 option.</description>
    </item>
    <item>
      <title>Compiler Predefined Macros</title>
      <link>/core/c&#43;&#43;/misc/compiler-predefinded-macro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/compiler-predefinded-macro/</guid>
      <description>If we want to know what macros are defined by the compiler, we can use this command
echo | clang -dM -E - Note:
also works for gcc echo | gcc -dM -E - the last dash - means taking input of clang from stdin, which is echo output -dM is the short name of -qshowmacros AIX xlclang requires a regular file, so you can feed it any file (even an empty file) echo &amp;gt; empty_file xlclang -dM -E empty_file Output of some compilers</description>
    </item>
    <item>
      <title>Epsilon</title>
      <link>/core/c&#43;&#43;/misc/epsilon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/epsilon/</guid>
      <description>We know two floats or doubles can not be compared exactly, but how close are considered equal?
The anwser is epsilon. Although you can define your own constant espsilon to any precision you want, the system, or the compiler has a default value as std::numeric_limits&amp;lt;T&amp;gt;::epsilon().
epsilon.cpp
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;iomanip&amp;gt; // setprecision #include &amp;lt;limits&amp;gt; // numeric_limits&amp;lt;T&amp;gt;::epsilon() #include &amp;lt;cstdlib&amp;gt; // atof, stod, strtod #include &amp;lt;cctype&amp;gt; // isdigit using namespace std; int main(int argc, char* argv[]) { double epsilon_f = numeric_limits&amp;lt;float&amp;gt;::epsilon(); cout &amp;lt;&amp;lt; &amp;#34;numeric_limits&amp;lt;float&amp;gt;::epsilon()=&amp;#34; &amp;lt;&amp;lt; epsilon_f &amp;lt;&amp;lt; endl; double epsilon = numeric_limits&amp;lt;double&amp;gt;::epsilon(); cout &amp;lt;&amp;lt; &amp;#34;numeric_limits&amp;lt;double&amp;gt;::epsilon()=&amp;#34; &amp;lt;&amp;lt; epsilon &amp;lt;&amp;lt; endl; streamsize default_precision = cout.</description>
    </item>
    <item>
      <title>Identify Compiler Using Predefined Macros</title>
      <link>/core/c&#43;&#43;/misc/identify-compiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/identify-compiler/</guid>
      <description>Reference SourceForge.net
Compiler Macro Sample Value Description gcc __GNUC__ 4 version major __GNUC_MINOR__ 4 version revision/minor clang __clang__ __clang_major__ version major __clang_minor__ version minor VisualC++ _MSC_VER 1910 VVRR 15.0(2017) _MSC_FULL_VER 191025017 VVRRPPPP SolarisStudio __SUNPRO_C 0x5120 0xVRP version,revision,patch (upto 5.9) 0xVRRP later, e.g. ss12.3/compiler5.12 __SUNPRO_CC IBM xlC __ibmxl__ clang-based compiler __ibmxl_vrm__ 0x0D010600 0xVVRRMM00 version,release,modification,fix e.g. 13.1.6.1 __ibmxl_version__ 13 version __ibmxl_release__ 1 release __ibmxl_modification__ 6 modification __ibmxl_ptf_fix_level__ 1 fix __xlC__ 1 legacy compiler, 0xVVRR, don&amp;rsquo;t use HP aCC __HP_aCC 12100 VVRRPP (version,revision,patch) </description>
    </item>
    <item>
      <title>Manuals of Compilers</title>
      <link>/core/c&#43;&#43;/misc/manuals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/manuals/</guid>
      <description> Solaris/Oracle Studio Solaris Studio 12.4 Oracle Developer Studio 12.6 IBM Open XL C/C++ for AIX 16.1, C++11/14 13.1, partial C++11 </description>
    </item>
    <item>
      <title>Nm - Show Symbols of a Module</title>
      <link>/core/c&#43;&#43;/misc/nm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/nm/</guid>
      <description>NM nm is a utility on posix systems that can list symbols of a module, such as .o, .a, .so, and excutables. Here are common options
option long-option description -A &amp;ndash;print-file-name filename the symbol is found, useful on archive -o the same with -A -C &amp;ndash;demangle[=style] demangle C++ names -g &amp;ndash;external-only external symbols can be accessed by external modules -l &amp;ndash;line-numbers show filename:line for each name, if the debug information is found in the module -u &amp;ndash;undefined-only external symbols referenced &amp;ndash;defined-only only defined symbols for each object file The most common types of symbols (upper-case for external symbols)</description>
    </item>
    <item>
      <title>picojson</title>
      <link>/core/c&#43;&#43;/misc/picojson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/picojson/</guid>
      <description>picojson is a tiny header only json c++ library. It only uses standard C++ library without other dependencies. It supports C++ standard before C++11.</description>
    </item>
    <item>
      <title>readelf - display information about ELF files</title>
      <link>/core/c&#43;&#43;/misc/readelf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/misc/readelf/</guid>
      <description></description>
    </item>
  </channel>
</rss>
