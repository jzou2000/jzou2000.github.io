<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Make on My Hugo</title>
    <link>/core/c&#43;&#43;/make/</link>
    <description>Recent content in Make on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Mar 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/c++/make/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playing With GNUMake</title>
      <link>/core/c&#43;&#43;/make/playing-with-gmake/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/playing-with-gmake/</guid>
      <description>and # test $(and c1,c2,c3,...N) # return N or &amp;#39;&amp;#39; if any of them is empty # # e.g. # make -f and.mk A=a B=b C= result = $(and $(A),$(B),$(C)) $(info result=$(result)) all:;@: $ make -f and.mk A=a result= $ make -f and.mk A=a B=b result= $ make -f and.mk A=a B=b C=c result=c $ make -f and.mk B=b C=c result= $ or - fallbacks # test $(or c1,c2,c3,...N) # return &amp;#39;&amp;#39; or the first non-empty # # e.</description>
    </item>
    <item>
      <title>GMake Recipes</title>
      <link>/core/c&#43;&#43;/make/gmake-recipes/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/gmake-recipes/</guid>
      <description>Check if two variables equal Surprisingly, gmake doesn&amp;rsquo;t have function to check to variables equal. This guarentee works
$(and $(findstring $a,$b),$(findstring $b,$a)) however, following solution works in most cases
eq = $(findstring __$1__,__$2__) iseq = $(if $(call eq,$1,$2),eq,ne) a:=abc b:=b $(info [$a] $(call iseq,$a,$b) [$b]) a:=abc b:=abc b $(info [$a] $(call iseq,$a,$b) [$b]) a:=abc b b:=abc b $(info [$a] $(call iseq,$a,$b) [$b]) all: ;@: Result
[abc] != [b] [abc] != [abc b] [abc b] == [abc b] Check if a variable in a list Two functions can achieve this task:</description>
    </item>
    <item>
      <title>A Makefile Template</title>
      <link>/core/c&#43;&#43;/make/make-templ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/make-templ/</guid>
      <description>Module Variables Variable Required Default Example Description NAME yes mymod name of module, target name is generated from the module name BINNAME override the convention of target name, see below notes TYPE yes lib bin, lib, so, (none) SRCS . directories that contain source code SUBS list of sub modules DEPENDS list of depends DEFS -Djs compiler defines LDEF -Dpic linker defines INCS a/inc b/c list of include paths, without -I leading LIBS -labc list of libs with -l, include -L if needed OBJS a.</description>
    </item>
    <item>
      <title>C&#43;&#43; Pakcage Managers</title>
      <link>/core/c&#43;&#43;/make/cpp_pkg_mgr/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/cpp_pkg_mgr/</guid>
      <description> conan (both local and global servers, written in python) vcpkg (very usefull for Windows and Android, using cmake) cpm pacm spack hunter Ref:
Microsoft C++ Team Blog </description>
    </item>
    <item>
      <title>Link Failure on AIX</title>
      <link>/core/c&#43;&#43;/make/aix-static-lib/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/aix-static-lib/</guid>
      <description>AIX linker calls all static constructors in archieves ignoring whether that module is imported or not, which leads to unused modules are forced to be pulled into the target application. This is a different behavior from other compilers.</description>
    </item>
    <item>
      <title>Shared Object and soname</title>
      <link>/core/c&#43;&#43;/make/soname/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/soname/</guid>
      <description>Useful command objdump - display information from object files nm - list symbols from object files objdump option description -p,&amp;ndash;private-headers needed for showing SONAME, dependencies, etc -t,&amp;ndash;syms symbols -C,&amp;ndash;demangle demangle C++ names SONAME SONAME is the &amp;rsquo;logical&amp;rsquo; name of a shared object, which is saved in the target binary when it is linked with a .so file, i.e. the linker use libname.so to resolve -lname and write its soname in the target file.</description>
    </item>
    <item>
      <title>Using Static and Shared Libraries Across Platforms</title>
      <link>/core/c&#43;&#43;/make/libs-across-platforms/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/libs-across-platforms/</guid>
      <description>Using Static and Shared Libraries Across Platforms
linker (ld) staticlly or dynamically hpux
-a search whether shared or archive libraries are searched with -l option search=archive|shared|archive_shared|shared_archive|default pass to aCC -Wl,-a,archive -lmy_archive -Wl,-a,shared_archive -b create a shared library rather than a normal executable file osx
-dylib produce a mach-o shared library with file type MH_DYLIB -search_dylibs_first tools ldd linux,solaris,hupx,aix otool osx otool -L file </description>
    </item>
    <item>
      <title>Build 32bit Applications on 64bit Debian</title>
      <link>/core/c&#43;&#43;/make/build-m32/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/build-m32/</guid>
      <description>On 64bit Debian system, default gcc/g++ development packages support developing 64bit application only. You need 32bit libs to build applications in 32bit.
sudo apt-get install g++-multilib Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: g++-6-multilib gcc-6-multilib gcc-multilib lib32asan3 lib32atomic1 lib32cilkrts5 lib32gcc-6-dev lib32gcc1 lib32gomp1 lib32itm1 lib32mpx2 lib32quadmath0 lib32stdc++-6-dev lib32stdc++6 lib32ubsan0 libc-dev-bin libc6 libc6-dbg libc6-dev libc6-dev-i386 libc6-dev-x32 libc6-i386 libc6-x32 libx32asan3 libx32atomic1 libx32cilkrts5 libx32gcc-6-dev libx32gcc1 libx32gomp1 libx32itm1 libx32quadmath0 libx32stdc++-6-dev libx32stdc++6 libx32ubsan0 linux-libc-dev Suggested packages: lib32stdc++6-6-dbg libx32stdc++6-6-dbg glibc-doc The following NEW packages will be installed: g++-6-multilib g++-multilib gcc-6-multilib gcc-multilib lib32asan3 lib32atomic1 lib32cilkrts5 lib32gcc-6-dev lib32gcc1 lib32gomp1 lib32itm1 lib32mpx2 lib32quadmath0 lib32stdc++-6-dev lib32stdc++6 lib32ubsan0 libc6-dev-i386 libc6-dev-x32 libc6-i386 libc6-x32 libx32asan3 libx32atomic1 libx32cilkrts5 libx32gcc-6-dev libx32gcc1 libx32gomp1 libx32itm1 libx32quadmath0 libx32stdc++-6-dev libx32stdc++6 libx32ubsan0 The following packages will be upgraded: libc-dev-bin libc6 libc6-dbg libc6-dev linux-libc-dev 5 upgraded, 31 newly installed, 0 to remove and 182 not upgraded.</description>
    </item>
    <item>
      <title>GN</title>
      <link>/core/c&#43;&#43;/make/gn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/gn/</guid>
      <description>What is GN? </description>
    </item>
    <item>
      <title>link whole archive statically</title>
      <link>/core/c&#43;&#43;/make/whole-archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/whole-archive/</guid>
      <description>Why By default, only objects that contain (directly) referenced symbols are extracted to the target executable (either an application or a shared object) from an archive by the linker. It is possible that required objects are not linked in some special cases, when they are not directly referenced but are invoked indirectly at runtime, such as:
objects created by factory pattern. callbacks through pointers place-holders that will be invoked by applications (as a shared object) or external linked shared objects (as a host application) How The linker has a pair of options to turn on/off the behavior of extracting the whole archive</description>
    </item>
    <item>
      <title>Univeral Binaries on MacOS</title>
      <link>/core/c&#43;&#43;/make/mac-universal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/make/mac-universal/</guid>
      <description>A univeral binary object is a composite binary that contains multiple binaries for different architectures, which could be
32-bit and 64-bit for hardwares that use Intel CPUs before Apple M1 was released on Nov 2020. Intel (x86_64) and Apple Arm (arm64) for hardwares that use M1 and later. always 64-bits &amp;ldquo;Standard&amp;rdquo; procedure to build univeral binaries build for each architecture separately use lipo to create a single univeral binary from multiple single-architecture binaries Reference</description>
    </item>
  </channel>
</rss>
