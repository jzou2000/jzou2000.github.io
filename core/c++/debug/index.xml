<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debug on My Hugo</title>
    <link>/core/c&#43;&#43;/debug/</link>
    <description>Recent content in Debug on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Mar 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/c++/debug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sysinternals</title>
      <link>/core/c&#43;&#43;/debug/sysinternals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/sysinternals/</guid>
      <description>Reference
sysinternals </description>
    </item>
    <item>
      <title>Trace</title>
      <link>/core/c&#43;&#43;/debug/trace/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/trace/</guid>
      <description>References
dtrace.org brendangregg.com strace - the linux syscall tracer </description>
    </item>
    <item>
      <title>Using DBX to Debug</title>
      <link>/core/c&#43;&#43;/debug/dbx-aix/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/dbx-aix/</guid>
      <description>A Typical Session Tips (dbx) help disable disable &amp;lt;status-number&amp;gt; disable all The traces or stops corresponding to the given numbers are disabled. The numbers associated with traces and stops can be printed with the &amp;#34;status&amp;#34; command. (dbx) help display &amp;lt;address&amp;gt; , &amp;lt;address&amp;gt; / [&amp;lt;mode&amp;gt;] [&amp;gt; &amp;lt;filename&amp;gt;] &amp;lt;address&amp;gt; / [&amp;lt;count&amp;gt;] [&amp;lt;mode&amp;gt;] [&amp;gt; &amp;lt;filename&amp;gt;] &amp;lt;address&amp;gt; / (&amp;lt;expression&amp;gt;) [&amp;lt;mode&amp;gt;] [&amp;gt; &amp;lt;filename&amp;gt;] &amp;lt;address&amp;gt; = [&amp;lt;mode&amp;gt;] [&amp;gt;&amp;lt;filename&amp;gt;] Display contents of memory starting at the first &amp;lt;address&amp;gt; up to the second &amp;lt;address&amp;gt; or until &amp;lt;count&amp;gt; items are printed.</description>
    </item>
    <item>
      <title>Shared Object Miscelleous</title>
      <link>/core/c&#43;&#43;/debug/shared-object-debug/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/shared-object-debug/</guid>
      <description>It is well known that LD_LIBRARY_PATY is used to specified the search paths for shared objects (dynamically loaded libraries, equivalent to DLL on Windows). However there are other environment varaibles that are also useful.
LD_DEBUG Let&amp;rsquo;s say an application app will load some shared objects. Set LD_DEBUG=help shows the usage of this variable.
export LD_DEBUG=help $ app Valid options for the LD_DEBUG environment variable are: libs display library search paths reloc display relocation processing files display progress for input file symbols display symbol table processing bindings display information about symbol binding versions display version dependencies scopes display scope information all all previous options combined statistics display relocation statistics unused determined unused DSOs help display this help message and exit To direct the debugging output into a file instead of standard output a filename can be specified using the LD_DEBUG_OUTPUT environment variable.</description>
    </item>
    <item>
      <title>Debugging on OSX</title>
      <link>/core/c&#43;&#43;/debug/osx-debug/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/osx-debug/</guid>
      <description>SIP (System Integrity Protection) SIP is introduced in OS X EI Capitan. Turn it off to debug an app. Turn off SIP
Note: On some old version of OSX (e.g. 10.9) extra command is required:
$ sudo /usr/sbin/DevToolsSecurity --enable Password: Developer mode is now enabled. </description>
    </item>
    <item>
      <title>Debugger</title>
      <link>/core/c&#43;&#43;/debug/debugger/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/debugger/</guid>
      <description>IBM dbx Reference IBM Knowledge Center: Using the dbx debug program DBX Howto Guide Tutorial on Dbx (AIX) Syntax dbx [options] objectFile [coreFile] -a processID -B debugFile, alternative debug file -c commandFile, run dbx commands before reading stdin -I directory, directories for searching source files -E debugEnvironment -p oldPath=newPath:... -u -F , turn off lazy read mode -L , keep linkage symbols -r , run object file immediately and exit dbx if it ends successfully -x , (fortran) prevents from stripping trailing underscore -v , skip the validity checking -C coreFile Subcommands use &amp;ldquo;help&amp;rdquo; to list all subcommands use &amp;ldquo;help command&amp;rdquo; to get usage details This is just a list of most common subcommands</description>
    </item>
    <item>
      <title>Dr.Memory</title>
      <link>/core/c&#43;&#43;/debug/drmemory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/drmemory/</guid>
      <description>Basic Usage drmemory -quiet -batch -brief -ignore_kernel -no_gen_suppress_offs -logdir ./drm-log -suppress myfile.txt -- app [app_options] option description -v verbose information (for debugging DrM itself) -brief show simplified and easier-to-read error reports -quiet stop displaying dialogs and stderr -batch do not invoke notepad at the end -logdir dir-name where the output go -ignore_kernel attempt execution on an unsupported kernel -suppress file file containing errors to suppress -gen_suppress_offs generate suppress mod+offs, not much useful in general, turn off by -no_gen_suppress_offs suppress file Dr.</description>
    </item>
    <item>
      <title>GDB recipes</title>
      <link>/core/c&#43;&#43;/debug/gdb-recipe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/gdb-recipe/</guid>
      <description>common command bt run, next, step, continue, finish, until break, bt(where), up/down l(list) p print break, tbreak break loc if con rbreak regex - on functions matched regex info breakpoints clear n - range condition bnum expre command range&amp;hellip; &amp;hellip; end save breakpoints [filename] watch, rwatch(for read), awatch (read+write), info watchpoints catch, tcatch TUI - TextWindow UI Four windows - command and source are available by default
command - regular gdb command source - source code assemble register Key binding</description>
    </item>
  </channel>
</rss>
