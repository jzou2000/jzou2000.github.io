<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language on My Hugo</title>
    <link>/core/c&#43;&#43;/lang/</link>
    <description>Recent content in Language on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/c++/lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Feature Cheatsheet by Versions</title>
      <link>/core/c&#43;&#43;/lang/version-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/lang/version-cheatsheet/</guid>
      <description> modern cpp features cheatsheet </description>
    </item>
    <item>
      <title>Pitfalls - template</title>
      <link>/core/c&#43;&#43;/lang/pitfall-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/lang/pitfall-template/</guid>
      <description>this Because template is at source level, there&amp;rsquo;s no information of the external base class, this-&amp;gt; is required to reference members of base class that are not in the scope. Following is an example:
#include &amp;lt;vector&amp;gt; template &amp;lt;typename T&amp;gt; class my_vector : public std::vector&amp;lt;T&amp;gt; { size_t length() const { // this would fail because the compiler doesn&amp;#39;t know // where size() comes from before instantiating // return size(); return this-&amp;gt;size(); } }; </description>
    </item>
    <item>
      <title>Template Instantiation</title>
      <link>/core/c&#43;&#43;/lang/template-instatiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/lang/template-instatiation/</guid>
      <description>Template template &amp;lt;typename T&amp;gt; class Trait { public: typedef T type; static const size_t size; static const char* const name; }; Instantiation Explicit instantiation - instantiate class only
template class Trait&amp;lt;char&amp;gt;; template class Trait&amp;lt;unsigned int&amp;gt;; Implicit instantiation - instantiate class AND object of the class
Trait&amp;lt;char&amp;gt; varChar; Trait&amp;lt;long&amp;gt; varLong; Define static members
template&amp;lt;&amp;gt; const size_t Trait&amp;lt;char&amp;gt;::size = sizeof(char); template&amp;lt;&amp;gt; const char* const Trait&amp;lt;char&amp;gt;::name = &amp;#34;char&amp;#34;; template&amp;lt;&amp;gt; const size_t Trait&amp;lt;unsigned int&amp;gt;::size = sizeof(unsigned int); template&amp;lt;&amp;gt; const char* const Trait&amp;lt;unsigned int&amp;gt;::name = &amp;#34;unsigned int&amp;#34;; </description>
    </item>
    <item>
      <title>Template Variadic</title>
      <link>/core/c&#43;&#43;/lang/template-variadic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/lang/template-variadic/</guid>
      <description>Variable Arguments #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdlib&amp;gt; using namespace std; //---------------------------------------------------------------------- // function sum accept any number of args, add (operator+) them together //----------------------------------------------------------------------- // recurisve stopper template &amp;lt;typename T&amp;gt; T sum(T v) { return v; } // recursive calls template &amp;lt;typename T, typename... Args&amp;gt; T sum(T first, Args...args) { return first + sum(args...); } //---------------------------------------------------------------------- // get environment variable, with fallback names //----------------------------------------------------------------------- // recursive stopper const char* env(const char* name) { return getenv(name); } // recursive calls template &amp;lt;typename.</description>
    </item>
  </channel>
</rss>
