<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pitfalls on My Hugo</title>
    <link>/core/c&#43;&#43;/pitfalls/</link>
    <description>Recent content in Pitfalls on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/c++/pitfalls/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implicit Type Convertion In Overload</title>
      <link>/core/c&#43;&#43;/pitfalls/overload-implicit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/pitfalls/overload-implicit/</guid>
      <description>Use Case Examples overload-implicit.cpp
#include &amp;lt;iostream&amp;gt; using namespace std; /* test overload implicit convertion, especially in constructor */ class A { public: explicit A(int v) { cout &amp;lt;&amp;lt; &amp;#34;A.ctor int: &amp;#34; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;} A(short v) { cout &amp;lt;&amp;lt; &amp;#34;A.ctor short: &amp;#34; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;} A(const char* v) { cout &amp;lt;&amp;lt; &amp;#34;A.ctor const char*: &amp;#34; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl; } A(const unsigned char* v) { cout &amp;lt;&amp;lt; &amp;#34;A.ctor const unsigned char*: &amp;#34; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl; } A(const void* v) { cout &amp;lt;&amp;lt; &amp;#34;A.</description>
    </item>
    <item>
      <title>Pitfall - Big Five</title>
      <link>/core/c&#43;&#43;/pitfalls/big5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/pitfalls/big5/</guid>
      <description>In Big-Five (or Big-Three in prev-11) theory, we need to define copy/move constructors and assign/move operators (along with destructor, virtual if derived classes are expected).
The question is, in the derived class, do we need to define them, especially when we don&amp;rsquo;t have extra data members and actions in derived class? If we do define them, what pitfalls can be?
copy/move constructor Not necessary if your derived class doesn&amp;rsquo;t have extra members and actions to care about, beause by default the compiler will use member-to-member-copy method to generate copy constructor, as long as the base class hanles copy/move correctly, everything is fine.</description>
    </item>
  </channel>
</rss>
