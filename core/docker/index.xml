<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on My Hugo</title>
    <link>/core/docker/</link>
    <description>Recent content in Docker on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Feb 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install Docker</title>
      <link>/core/docker/install/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/install/</guid>
      <description>install sudo apt-get update sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository \ &amp;#34;deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo &amp;#34;$ID&amp;#34;) \ $(lsb_release -cs) \ stable&amp;#34; sudo apt-get update sudo apt-get install docker-ce # apt-cache madison docker-ce sudo groupadd docker sudo usermod -aG docker jzou sudo docker run hello-world # docker data/containers/images are stored at /var/lib/docker docker --version Docker version 17.</description>
    </item>
    <item>
      <title>Docker Cheatsheet - Basic</title>
      <link>/core/docker/cheatsheet-basic/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/cheatsheet-basic/</guid>
      <description>Get Information docker --version docker info docker images ls docker container ls -all Container docker run [OPTIONS] IMAGE [COMMAND] [ARGS...] -d --detach Most common options
option default description -d, &amp;ndash;detach run in background -e, &amp;ndash;env set environment varialbes, e.g. -e MYVAR=foo -e VAR1 &amp;ndash;env-file read env vars from a file &amp;ndash;expose expose a port or a range of ports -h,&amp;ndash;hostname container host name -i,&amp;ndash;interactive keep stdin open even if not attached -l,&amp;ndash;label set meta data on a container &amp;ndash;name assign a name to the container -p,&amp;ndash;pulish publish a container&amp;rsquo;s port(s) to the host, e.</description>
    </item>
    <item>
      <title>Common Tasks on Docker Maintenance</title>
      <link>/core/docker/common-tasks/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/common-tasks/</guid>
      <description>Update Image Update an image (with tag if applicable) from a registry and remove unused images. The image below is klakegg/hugo:alpine, which is used to build this site.
docker image pull klakegg/hugo:alpine docker image prune </description>
    </item>
    <item>
      <title>Change Docker Storage</title>
      <link>/core/docker/change-docker-storage/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/core/docker/change-docker-storage/</guid>
      <description>Purpose By default docker save all its data, including images, containers, etc at /var/lib/docker
jzou@debian9: $ docker info Client: Debug Mode: false Server: Containers: 1 Running: 1 Paused: 0 Stopped: 0 Images: 8 Server Version: 19.03.5 Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339 runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657 init version: fec3683 Security Options: seccomp Profile: default Kernel Version: 4.</description>
    </item>
    <item>
      <title>Some Docker Images On hub.docker.com</title>
      <link>/core/docker/hub-img/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/hub-img/</guid>
      <description>My List klakegg/hugo latest de97b1ae4b16 3 weeks ago 44.2MB (0.63.1) alpine latest 965ea09ff2eb 4 months ago 5.55MB node lts-alpine3.10 8d20833f510f 3 weeks ago 84.9MB (12.14.1) node lts 98a2c7c96ac3 5 days ago 914MB centos 6 d0957ffdf8a2 11 months ago 194MB centos latest 9f38484d220f 11 months ago 202MB debian 9-slim b805107aed7b 11 months ago 55.3MB debian latest 0af60a5c6dd0 11 months ago 101MB walkero/node-vuecli latest 8ac98d2b7f9a 11 months ago 189MB anapsix/alpine-java latest c45785c254c5 12 months ago 126MB maven alpine 7445f83cd169 9 months ago 122MB python alpine a1cd5654cf3c 12 days ago 109MB (3.</description>
    </item>
    <item>
      <title>Make Toolchains with Docker</title>
      <link>/core/docker/mk-tool-chain/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/mk-tool-chain/</guid>
      <description>Task Requirement We need a centos5 container with following packages:
gcc44 and g++44 that can build both 64 and 32 bit app python2.7 with PyYAML module perl 5.8+ Tips The latest open-ssl (e.g. v1.1.1 at write time) is not supported by old distro (e.g. centos5), so it is wise to download (src) modules into the working folder before running docker build instead of doing so in Dockerfile if openssl is used (e.</description>
    </item>
    <item>
      <title>Run glibc Applications on Alpine</title>
      <link>/core/docker/alpine-glibc/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/alpine-glibc/</guid>
      <description>The Problem Alpine is musl-based, however most existing applications are glibc-based. Rebuilding everything with musl is an ideal and clean solution, but that be not practical (e.g. sources/dependencies are not availalbe) or not economical (e.g. not enough resources or in a tight schedule) or other reasons.
Let&amp;rsquo;s face it, alpine/musl is good (size, security, &amp;hellip;) but we still need to run glibc-apps on alpine.
There are bunch of solutions already:</description>
    </item>
    <item>
      <title>Tips</title>
      <link>/core/docker/tips/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/core/docker/tips/</guid>
      <description>Access Host Server From Container Once in a while an application runs in the container need to access a service running in the host. Here is an example:
A web-front-end development tool, e.g. @vue/cli runs in a docker container, which launches a monitor server during the front-end composing/debugging. The application needs to get data (e.g. RESTs) from the site, which is usually implemented as a gateway inside the @vue/cli monitor.</description>
    </item>
    <item>
      <title>Add Essential Packages to a Barebone Docker Image</title>
      <link>/core/docker/package-size-barebone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/docker/package-size-barebone/</guid>
      <description>ubuntu size/virtual
barebone, 0/77.8 apt update, 45.7/123 vim, 105/183 file, 113/190 less, 113/190 gdb, 216/293 gdbserver, 216/294 iodbc, 277/354 unixodbc, 277/355 centos:7 barebone, 0/204 yum update, 368/572 gdb, 375/579 less, 378/582 </description>
    </item>
    <item>
      <title>Alpine Package Study</title>
      <link>/core/docker/pkg-alpine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/docker/pkg-alpine/</guid>
      <description>pkg size after install cmd description base 0 base alpine, 3.11, 5.6m g++ 171m apk add g++ g++ 9.2.0 (18m/59m) make 171m apk add make gmake 4.2.1 (1.8m) python 208m apk add python python 2.7.16 python3 224m apk add python3 python 3.8.2 node 259m apk add nodejs node.js 12.15.0 npm 286 apk add npm npm 12.15.0 yarn 291 apk add yarn yarn 1.19.2 curl 288 apk add curl curl 2.</description>
    </item>
    <item>
      <title>CentOS:5</title>
      <link>/core/docker/centos5v/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/docker/centos5v/</guid>
      <description>Create CentOS:5v Vault FROM centos:5 WORKDIR /home ARG repo=&amp;#34;/etc/yum.repos.d/CentOS-[a-zA-UW-Z]*.repo /etc/yum.repos.d/lib*.repo&amp;#34; COPY CentOS-Vault.repo /etc/yum.repos.d/ RUN rm -f $repo \ &amp;amp;&amp;amp; yum -y update \ &amp;amp;&amp;amp; yum -y downgrade libselinux \ &amp;amp;&amp;amp; yum -y install m4 which make ENTRYPOINT [ &amp;#34;/bin/bash&amp;#34; ] Build the docker image with tag cen5v
~/codex/docker/cen5v$ docker build -t centos:5v . [+] Building 25.0s (9/9) FINISHED =&amp;gt; [internal] load build definition from Dockerfile 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 339B 0.</description>
    </item>
    <item>
      <title>Java Container amazoncorretto</title>
      <link>/core/docker/amazoncorretto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/docker/amazoncorretto/</guid>
      <description>Amazon offers useful docker images for different JRE versions, i.e. amazoncorretto, which is based on amazonlinux:2, which is based on centos/rhel.
j17$ cat /etc/os-release NAME=&amp;#34;Amazon Linux&amp;#34; VERSION=&amp;#34;2&amp;#34; ID=&amp;#34;amzn&amp;#34; ID_LIKE=&amp;#34;centos rhel fedora&amp;#34; VERSION_ID=&amp;#34;2&amp;#34; PRETTY_NAME=&amp;#34;Amazon Linux 2&amp;#34; ANSI_COLOR=&amp;#34;0;33&amp;#34; CPE_NAME=&amp;#34;cpe:2.3:o:amazon:amazon_linux:2&amp;#34; HOME_URL=&amp;#34;https://amazonlinux.com/&amp;#34; Unfortunately some commn utilities are not include, e.g. ping
Find out what package contains ping j17$ yum whatprovides ping Loaded plugins: ovl, priorities 8 packages excluded due to repository priority protections AmazonCorretto/x86_64/filelists_db | 80 kB 00:00:00 amzn2-core/2/x86_64/filelists_db | 54 MB 00:00:15 iputils-20160308-10.</description>
    </item>
  </channel>
</rss>
