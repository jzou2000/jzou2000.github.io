<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pipeline on My Hugo</title>
    <link>/core/jenkins/pipeline/</link>
    <description>Recent content in Pipeline on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/jenkins/pipeline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Simple Task</title>
      <link>/core/jenkins/pipeline/simple-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/simple-task/</guid>
      <description>pipeline dummy task
/* This is a simple task that * accepts parameters and show them: lable/string, debug/bool * customerize build description: by parameter description * last for a while (by parameter second) to simulate a real task * return succeed or fail (by parameter TASKFAILS) It is used to be called in sequence or parallel to fine tune different behaviors */ properties([ parameters( [ string(name: &amp;#39;label&amp;#39;, defaultValue: &amp;#39;head&amp;#39;, description: &amp;#39;proudct label&amp;#39;), string(name: &amp;#39;description&amp;#39;, description: &amp;#39;build description&amp;#39;, trim: true), string(name: &amp;#39;sleep&amp;#39;, defaultValue: &amp;#39;5&amp;#39;, description: &amp;#39;seconds to sleep&amp;#39;), booleanParam(name: &amp;#39;debug&amp;#39;, description: &amp;#39;debug build&amp;#39;), booleanParam(name: &amp;#39;TASKFAILS&amp;#39;, description: &amp;#39;set task fail&amp;#39;), ] ) ]) if (params.</description>
    </item>
    <item>
      <title>Declarative Pipeline vs Scripted Pipeline</title>
      <link>/core/jenkins/pipeline/declaretive-vs-scripted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/declaretive-vs-scripted/</guid>
      <description>Pipeline can be declarative, which is newer and preferred, however scripted pipeline is needed for following reasons:
called in functions (e.g. shared libraries) size limit complicated structures Declarative Pipeline pipeline { // top block of pipeline agent { label &amp;#34;agent label&amp;#34; } stages { stage(&amp;#39;stage-name&amp;#39;) { steps { echo &amp;#34;run stage: ${stage}&amp;#34; // optional if you want some limited script script { } } } } } agent can be used only in declarative pipelines Scripted Pipeline node { environment { } stage { echo &amp;#34;actions&amp;#34; if (condtion) } } node(&amp;#34;agent label&amp;#34;) { stage { echo &amp;#34;actions&amp;#34; } } </description>
    </item>
    <item>
      <title>Global Variables (environment)</title>
      <link>/core/jenkins/pipeline/global-vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/global-vars/</guid>
      <description>Variable Description BRANCH_NAME For a multibranch project, this will be set to the name of the branch being built, for example in case you wish to deploy to production from master but not from feature branches; if corresponding to some kind of change request, the name is generally arbitrary (refer to CHANGE_ID and CHANGE_TARGET). BRANCH_IS_PRIMARY For a multibranch project, if the SCM source reports that the branch being built is a primary branch, this will be set to &amp;ldquo;true&amp;rdquo;; else unset.</description>
    </item>
    <item>
      <title>Parallel Jobs in Declarative Pipeline</title>
      <link>/core/jenkins/pipeline/parallel-declare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/parallel-declare/</guid>
      <description>Run several jobs (for example, multiple instances of sample pipeline) in parallel, with some common parameters (e.g. DRV_LABEL) and preset other parameters. Of course you can run different pipelines with different job name. This is quite common in a release build, run one or more pipelines with different parameters.
By setting build description, it is easier to find different build when multiple instances is used with a single pipeline.
pipeline { agent none parameters { string name: &amp;#34;DRV_LABEL&amp;#34;, defaultValue: &amp;#34;head&amp;#34;, description: &amp;#39;product label&amp;#39; } stages { stage(&amp;#39;build-parallel&amp;#39;) { parallel { stage(&amp;#39;release-64&amp;#39;) { steps { build job: &amp;#39;task dump&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;release-64&amp;#39;), string(name: &amp;#39;DRV_LABEL&amp;#39;, value: &amp;#34;${params.</description>
    </item>
    <item>
      <title>Parallel Jobs in Script</title>
      <link>/core/jenkins/pipeline/parallel-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/parallel-script/</guid>
      <description>parallel can be used as a function in a script. It accepts a map of closure, where the key is the name of stage, and the closure is a snippet that starts a job.
/* run jobs in parallel */ properties([ parameters( [ string (name: &amp;#39;DRV_LABEL&amp;#39;, description: &amp;#39;Product label&amp;#39;), ] ) ]) job_base = &amp;#39;Cloud/ODBC/Snowflake/poc&amp;#39; def build_params = [] params.each { if (it.key ==~ /_LABEL/) build_params.add(string(name: &amp;#34;${it.key}&amp;#34;, value: &amp;#34;${it.value}&amp;#34;)) } job_list = [ [ name: &amp;#39;build-win&amp;#39;, pipeline: &amp;#39;w2012r2-vs2015&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#34;build win: w2012r2&amp;#34;), string(name: &amp;#39;COMPILER&amp;#39;, value: &amp;#39;vs2015&amp;#39;), string(name: &amp;#39;BUILDTARGET&amp;#39;, value: &amp;#39;release&amp;#39;), ] ], [ name: &amp;#39;build-linux&amp;#39;, pipeline: &amp;#39;centos7-gcc5_5&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#34;build linux: centos7&amp;#34;), string(name: &amp;#39;COMPILER&amp;#39;, value: &amp;#39;gcc5_5&amp;#39;), string(name: &amp;#39;BUILDTARGET&amp;#39;, value: &amp;#39;debug&amp;#39;), ] ], ] pipeline { agent none stages { stage(&amp;#39;build-parallel&amp;#39;) { steps { script { def parallel_jobs = [:] // a map of closures for (job in job_list) { def name = &amp;#34;${job.</description>
    </item>
    <item>
      <title>Pipeline Syntax</title>
      <link>/core/jenkins/pipeline/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/syntax/</guid>
      <description>Declarative Pipeline pipeline { /* sections: agent, post, stages, steps */ } Catalog Tag Description Sections contain one or more Directives or Steps. agent can be top or stage leve post one or more additional steps that are run upon the completion of a Pipeline’s or stage’s run stages Containing a sequence of one or more stage directives steps a series of one or more steps to be executed in a given stage directive matrix Directives environment a sequence of key-value pairs options configuring Pipeline-specific options from within the Pipeline itself parameters a list of parameters that a user should provide when triggering the Pipeline triggers the automated ways in which the Pipeline should be re-triggered.</description>
    </item>
    <item>
      <title>Run Pipeline Stage In A Docker Container</title>
      <link>/core/jenkins/pipeline/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/docker/</guid>
      <description></description>
    </item>
    <item>
      <title>Run Task in Sequence - catchError</title>
      <link>/core/jenkins/pipeline/sequence-catcherror/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/sequence-catcherror/</guid>
      <description>/* Call three tasks in sequence, catch error The 2nd task fails, but the whole build continues. The whole build still fails. */ pipeline { agent none stages { stage(&amp;#39;task 1&amp;#39;) { steps { catchError { build job: &amp;#39;dummy task&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;setup&amp;#39;), ] } } } stage(&amp;#39;task 2&amp;#39;) { steps { catchError { build job: &amp;#39;dummy task&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;do the real work&amp;#39;), string(name: &amp;#39;sleep&amp;#39;, value: &amp;#39;3&amp;#39;), booleanParam(name: &amp;#39;TASKFAILS&amp;#39;, value: true), ] } } } stage(&amp;#39;task 3&amp;#39;) { steps { catchError { build job: &amp;#39;dummy task&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;cleanup&amp;#39;), ] } } } } } The output</description>
    </item>
    <item>
      <title>Run Task in Sequence - Simple Case</title>
      <link>/core/jenkins/pipeline/sequence-simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/sequence-simple/</guid>
      <description>/* Call three tasks in sequence, without any control the 2nd task fails, which leads the whole built abort. */ pipeline { agent none stages { stage(&amp;#39;task 1&amp;#39;) { steps { build job: &amp;#39;dummy task&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;setup&amp;#39;), ] } } stage(&amp;#39;task 2&amp;#39;) { steps { build job: &amp;#39;dummy task&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;do the real work&amp;#39;), string(name: &amp;#39;sleep&amp;#39;, value: &amp;#39;3&amp;#39;), booleanParam(name: &amp;#39;TASKFAILS&amp;#39;, value: true), ] } } stage(&amp;#39;task 3&amp;#39;) { steps { build job: &amp;#39;dummy task&amp;#39;, parameters: [ string(name: &amp;#39;description&amp;#39;, value: &amp;#39;cleanup&amp;#39;), ] } } } } Output</description>
    </item>
    <item>
      <title>Sample Pipeline</title>
      <link>/core/jenkins/pipeline/sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/sample/</guid>
      <description>This is a very basic pipeline that accepts some parameters. We can use it as a dummy job in some more complicated pipelines.
pipeline { agent any parameters { string name: &amp;#39;description&amp;#39;, description: &amp;#39;customized build description&amp;#39; string name: &amp;#34;DRV_LABEL&amp;#34;, defaultValue: &amp;#34;head&amp;#34;, description: &amp;#39;product label&amp;#39; choice name: &amp;#39;target&amp;#39;, choices: [&amp;#39;Release&amp;#39;, &amp;#39;Debug&amp;#39;] choice(name: &amp;#39;bitness&amp;#39;, choices: [&amp;#39;64&amp;#39;, &amp;#39;32&amp;#39;]) booleanParam name: &amp;#39;memory_check&amp;#39;, description: &amp;#39;if memory-check is enabled, valid only in Debug&amp;#39; } stages { stage(&amp;#39;build&amp;#39;) { steps { script { echo &amp;#34;--------${env.</description>
    </item>
    <item>
      <title>Steps Basic</title>
      <link>/core/jenkins/pipeline/steps-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/steps-basic/</guid>
      <description>catchError accept value for buildResult and stageResult
SUCCESS UNSTABLE FAILURE NOT_BUILT ABORTED </description>
    </item>
    <item>
      <title>Tips</title>
      <link>/core/jenkins/pipeline/tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/tips/</guid>
      <description> in environment section of pipeline, values have to be either quoted strings or function calls, variables are NOT accepted label = &amp;#34;v1.0&amp;#34; pipeline { environment { PRODUCT = &amp;#34;touch&amp;#34; LABEL = &amp;#34;${label}&amp;#34; TYPE = get_type() // failure // LABEL = label } } in environment section of pipeline, each item uses a line, without comma , pipeline { environment { PRODUCT = &amp;#34;touch&amp;#34; LABEL = &amp;#34;${label}&amp;#34; // not this // LABEL = &amp;#34;${label}&amp;#34;, TYPE = get_type() } } global variables shouldn&amp;rsquo;t be defined with def def a = &amp;#39;hello&amp;#39; b = &amp;#39;world&amp;#39; def foo() { echo &amp;#34;${a}&amp;#34; // a is not available echo &amp;#34;${b}&amp;#34; // OK } </description>
    </item>
    <item>
      <title>when - execute stage with conditions</title>
      <link>/core/jenkins/pipeline/when/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/pipeline/when/</guid>
      <description>A Simple Example pipeline { agent any parameters { booleanParam name: &amp;#39;Windows&amp;#39;, description: &amp;#39;run on Windows&amp;#39; choice name: &amp;#39;Target&amp;#39;, choices: [&amp;#39;release&amp;#39;, &amp;#39;debug&amp;#39;], description: &amp;#39;build target&amp;#39; } stages { stage(&amp;#39;windows-only&amp;#39;) { when { expression { params.Windows == true } } steps { echo &amp;#34;the task runs on Windows ------------------&amp;#34; } } stage(&amp;#39;debug-only&amp;#39;) { when { expression { params.Target == &amp;#39;debug&amp;#39; } } steps { echo &amp;#34;the task runs in debug mode&amp;#34; } } stage(&amp;#39;windows-debug-only&amp;#39;) { when { expression { params.</description>
    </item>
  </channel>
</rss>
