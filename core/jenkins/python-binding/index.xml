<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Binding on My Hugo</title>
    <link>/core/jenkins/python-binding/</link>
    <description>Recent content in Python Binding on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/jenkins/python-binding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>/core/jenkins/python-binding/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/overview/</guid>
      <description>Reference
document Install pip install python-jenkins Usage import jenkins SERVER = &amp;#39;https://jsen.isw.com&amp;#39; USERNAME = &amp;#39;jason.zou@isw.com&amp;#39; PASSWORD = &amp;#39;12434323424331313212&amp;#39; server = jenkins.Jenkins(SERVER, username=USERNAME, password=PASSWORD) # get list of top-level jobs jobs = server.get_jobs() working with folders server.create_job(&amp;#39;folder&amp;#39;, jenkins.EMPTY_FOLDER_XML) server.create_job(&amp;#39;folder/empty&amp;#39;, jenkins.EMPTY_FOLDER_XML) server.copy_job(&amp;#39;folder/empty&amp;#39;, &amp;#39;folder/empty_copy&amp;#39;) server.delete_job(&amp;#39;folder/empty_copy&amp;#39;) server.delete_job(&amp;#39;folder&amp;#39;) </description>
    </item>
    <item>
      <title>Build</title>
      <link>/core/jenkins/python-binding/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/build/</guid>
      <description>API Description get_build_info(name, number, depth=0) Get build information dictionary. get_build_env_vars(name, number, depth=0) Get build environment variables. get_build_test_report(name, number, depth=0) Get test results report. set_next_build_number(name, number) Set a job’s next build number. stop_build(name, number) Stop a running Jenkins build. delete_build(name, number) Delete a Jenkins build. get_running_builds() Return list of running builds. get_build_console_output(name, number) Get build console text. get_build_info(name, number, depth=0) Get build information dictionary.
Parameters:
name – Job name, str number – Build number, int depth – JSON depth, int Returns:</description>
    </item>
    <item>
      <title>Exceptions</title>
      <link>/core/jenkins/python-binding/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/exceptions/</guid>
      <description> Exception Description JenkinsException General exception type for jenkins-API-related failures NotFoundException A special exception to call out the case of receiving a 404 EmptyResponseException A special exception to call out the case receiving an empty response BadHTTPException A special exception to call out the case of a broken HTTP response TimeoutException A special exception to call out in the case of a socket timeout </description>
    </item>
    <item>
      <title>Job</title>
      <link>/core/jenkins/python-binding/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/job/</guid>
      <description>API Description get_job_info(name, depth=0, fetch_all_builds=False) Get job information dictionary get_job_info_regex(pattern, depth=0, folder_depth=0) Get a list of jobs information that contain names which match the regex pattern. get_job_name(name) Return the name of a job using the API. debug_job_info(job_name) Print out job info in more readable format. get_jobs(folder_depth=0, view_name=None) Get list of jobs. get_all_jobs(folder_depth=None) Get list of all jobs recursively to the given folder depth. copy_job(from_name, to_name) Copy a Jenkins job. rename_job(from_name, to_name) Rename an existing Jenkins job delete_job(name) Delete Jenkins job permanently.</description>
    </item>
    <item>
      <title>Misc</title>
      <link>/core/jenkins/python-binding/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/misc/</guid>
      <description>API Description get_info(item=&amp;rsquo;&amp;rsquo;, query=None) Get information on this Master or item on Master. get_whoami(depth=0) Get information about the user account that authenticated to Jenkins. get_version() Get the version of this Master. quiet_down() Prepare Jenkins for shutdown. run_script(script, node=None) Execute a groovy script on the jenkins master or on a node if specified.. wait_for_normal_op(timeout) Wait for jenkins to enter normal operation mode. get_info(item=&amp;rsquo;&amp;rsquo;, query=None) Get information on this Master or item on Master.</description>
    </item>
    <item>
      <title>Node</title>
      <link>/core/jenkins/python-binding/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/node/</guid>
      <description>API Description get_nodes(depth=0) Get a list of nodes connected to the Master get_node_info(name, depth=0) Get node information dictionary node_exists(name) Check whether a node exists assert_node_exists(name, exception_message=&amp;lsquo;node[%s] does not exist&amp;rsquo;) Raise an exception if a node does not exist delete_node(name) Delete Jenkins node permanently. disable_node(name, msg=&amp;rsquo;&#39;) Disable a node enable_node(name) Enable a node create_node(name, &amp;hellip;) Create a node get_node_config(name) Get the configuration for a node. reconfig_node(name, config_xml) Change the configuration for an existing node.</description>
    </item>
    <item>
      <title>Plugins</title>
      <link>/core/jenkins/python-binding/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/plugins/</guid>
      <description>API Description get_plugins_info(depth=2) Get all installed plugins information on this Master. get_plugin_info(name, depth=2) Get an installed plugin information on this Master. get_plugins(depth=2) Return plugins info using helper class for version comparison install_plugin(name, include_dependencies=True) Install a plugin and its dependencies from the Jenkins public repository get_plugins_info(depth=2) Get all installed plugins information on this Master.
This method retrieves information about each plugin that is installed on master returning the raw plugin data in a JSON format.</description>
    </item>
    <item>
      <title>Promotion</title>
      <link>/core/jenkins/python-binding/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/promotion/</guid>
      <description>API Description get_promotion_name(name, job_name) Return the name of a promotion using the API. assert_promotion_exists(name, &amp;hellip;) Raise an exception if a job lacks a promotion promotion_exists(name, job_name) Check whether a job has a certain promotion get_promotions_info(job_name, depth=0) Get promotion information dictionary of a job get_promotions(job_name) Get list of promotions running. delete_promotion(name, job_name) Delete Jenkins promotion permanently. create_promotion(name, job_name, config_xml) Create a new Jenkins promotion reconfig_promotion(name, job_name, config_xml) Change configuration of existing Jenkins promotion.</description>
    </item>
    <item>
      <title>Queue</title>
      <link>/core/jenkins/python-binding/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/queue/</guid>
      <description>API Description get_queue_item(number, depth=0) Get information about a queued item (to-be-created job). get_queue_info() cancel_queue(id) Cancel a queued build. get_queue_item(number, depth=0) Get information about a queued item (to-be-created job).
The returned dict will have a “why” key if the queued item is still waiting for an executor.
The returned dict will have an “executable” key if the queued item is running on an executor, or has completed running. Use this to determine the job number / URL.</description>
    </item>
    <item>
      <title>View</title>
      <link>/core/jenkins/python-binding/view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/jenkins/python-binding/view/</guid>
      <description>API Description get_view_name(name) Return the name of a view using the API. assert_view_exists(name, exception_message Raise an exception if a view does not exist view_exists(name) Check whether a view exists get_views() Get list of views running. delete_view(name) Delete Jenkins view permanently. create_view(name, config_xml) Create a new Jenkins view reconfig_view(name, config_xml) Change configuration of existing Jenkins view. get_view_config(name) Get configuration of existing Jenkins view. working with views server.create_view(&amp;#39;EMPTY&amp;#39;, jenkins.EMPTY_VIEW_CONFIG_XML) view_config = server.</description>
    </item>
  </channel>
</rss>
