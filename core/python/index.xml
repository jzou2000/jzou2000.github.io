<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on My Hugo</title>
    <link>/core/python/</link>
    <description>Recent content in Python on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/core/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shallow Or Deep</title>
      <link>/core/python/shallow-or-deep/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/core/python/shallow-or-deep/</guid>
      <description>Shadow 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;gt;&amp;gt;&amp;gt; m = [2, 5, 1] &amp;gt;&amp;gt;&amp;gt; d1 = {&amp;#39;m&amp;#39;: m} &amp;gt;&amp;gt;&amp;gt; d2 = {&amp;#39;name&amp;#39;: &amp;#39;Bond&amp;#39;} &amp;gt;&amp;gt;&amp;gt; d2.update(d1) &amp;gt;&amp;gt;&amp;gt; d2 {&amp;#39;m&amp;#39;: [2, 5, 1], &amp;#39;name&amp;#39;: &amp;#39;Bond&amp;#39;} &amp;gt;&amp;gt;&amp;gt; d1 {&amp;#39;m&amp;#39;: [2, 5, 1]} &amp;gt;&amp;gt;&amp;gt; d1[&amp;#39;m&amp;#39;][1] = 100 &amp;gt;&amp;gt;&amp;gt; d1 {&amp;#39;m&amp;#39;: [2, 100, 1]} &amp;gt;&amp;gt;&amp;gt; d2 {&amp;#39;m&amp;#39;: [2, 100, 1], &amp;#39;name&amp;#39;: &amp;#39;Bond&amp;#39;} Deep 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;gt;&amp;gt;&amp;gt; import copy &amp;gt;&amp;gt;&amp;gt; m = [2, 5, 1] &amp;gt;&amp;gt;&amp;gt; d1 = {&amp;#39;m&amp;#39;: m} &amp;gt;&amp;gt;&amp;gt; d2 = copy.</description>
    </item>
    <item>
      <title>pywin32</title>
      <link>/core/python/pywin32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/python/pywin32/</guid>
      <description>Summary website on github
Online document
Install and Document
pip install pywin32 There is no pywin32 actually (i.e. you can&amp;rsquo;t import pywin32), pywin32 package actually consists of a lot of modules, followings are the most common used
win32con - WIN32 constants that are used by many modules (strange enough that it is not mentioned in any documents) win32api - general win32 APIs win32process - process related APIs win32event - event related APIs more &amp;hellip; misc</description>
    </item>
    <item>
      <title>subprocess</title>
      <link>/core/python/subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/python/subprocess/</guid>
      <description>subprocess is a super-set and is intended to replace
os.system os.spawn* Stdout and Exit Code method return comment description run(args,kwargs) CompletedProcess object since 3.5 run and wait for sub-process to complete, supercede followings call(args,kwargs) exit code obsolete equivalent to run().returncode check_call(args, kwargs) exit code obsolete similar to call(), raise CalledProcessError if exit-code non-zero check_output(args, kwargs) stdout in string obsolete similar to check_call except returning stdout as string instead of exit code Note</description>
    </item>
    <item>
      <title>Debug Python Script With Pdb</title>
      <link>/core/python/debug-with-pdb/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/core/python/debug-with-pdb/</guid>
      <description>Just like gdb is still used for C/C++ programmer, pdb is still useful although we have many IDE tools like pycharm or vs-code. Gdb/pdb sometimes is the only choice in on-site environment when more advanced tools are not available or allowed.
Enable/Start pdb python -m pdb your_script.py Common Commands Command Description c(ont(inue)) continue w(here) print stack trace (reversed) b(reak) [fln|func[,condition]] set break point, fln=file:line, break without args lists all breakpoints tbreak &amp;hellip; temporary break cl(ear) [fln|bp#]&amp;hellip; clear breakpoint, all without args s(tep) step in n(ext) next unt(il) until line or out of current frame r(eturn) until the current frame p expr print expr pp expr print using pprint ** See full-list below.</description>
    </item>
    <item>
      <title>PIP Misc</title>
      <link>/core/python/pip-misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/python/pip-misc/</guid>
      <description>SSL cert failure The most common issue to install a package in a company network is
SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:581) this is because the company network blocks the access for various reasons such as security concerns.
To overwrite that, you need to specify trusted-host by observing the source host from pip output.
The most common pip source hosts are
pypi.org files.pythonhosted.org So following command resolves most of the problems</description>
    </item>
  </channel>
</rss>
