<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>socket on My Hugo</title>
    <link>/core/python/socket/</link>
    <description>Recent content in socket on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/core/python/socket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>asyncio</title>
      <link>/core/python/socket/asyncio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/python/socket/asyncio/</guid>
      <description>Simple Server Simple Client </description>
    </item>
    <item>
      <title>asyncore &#43; asynchat</title>
      <link>/core/python/socket/asyncore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/python/socket/asyncore/</guid>
      <description>Simple Server from __future__ import print_function import asyncore import asynchat import socket import sys import traceback as tb import exlib as x log = print class Server(asyncore.dispatcher): &amp;#34;&amp;#34;&amp;#34;Receives connections and establishes handlers for each client. &amp;#34;&amp;#34;&amp;#34; def __init__(self, address): asyncore.dispatcher.__init__(self) self.create_socket(socket.AF_INET, socket.SOCK_STREAM) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.bind(address) self.address = self.socket.getsockname() self.listen(1) log(&amp;#39;listening...{}&amp;#39;.format(self.address)) def handle_accept(self): # Called when a client connects to our socket client_info = self.accept() Handler(sock=client_info[0]) # We only want</description>
    </item>
    <item>
      <title>socket - lower-level networking interface</title>
      <link>/core/python/socket/socket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/python/socket/socket/</guid>
      <description>Server Sample ex-svr-socket.py
import socket import sys host, port = &amp;#39;localhost&amp;#39;, 9999 svr_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) svr_addr = (host, port) svr_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) svr_sock.bind(svr_addr) svr_sock.listen(1) connection, remote_addr = svr_sock.accept() # remote_addr == connection.getpeername() print(&amp;#39;accept connection from: {}&amp;#39;.format(remote_addr)) # this sample server accepts only one connection svr_sock.close() # echo data try: while True: data = connection.recv(16) print(&amp;#39;received: {}&amp;#39;.format(data)) if data: print(&amp;#39;sending data back to the client&amp;#39;) connection.sendall(data) else: break finally: connection.close() Client ex-sender.</description>
    </item>
  </channel>
</rss>
