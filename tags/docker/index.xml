<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on My Hugo</title>
    <link>/tags/docker/</link>
    <description>Recent content in docker on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Nov 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install Docker</title>
      <link>/core/docker/install/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/install/</guid>
      <description>install sudo apt-get update sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository \ &amp;#34;deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo &amp;#34;$ID&amp;#34;) \ $(lsb_release -cs) \ stable&amp;#34; sudo apt-get update sudo apt-get install docker-ce # apt-cache madison docker-ce sudo groupadd docker sudo usermod -aG docker jzou sudo docker run hello-world # docker data/containers/images are stored at /var/lib/docker docker --version Docker version 17.</description>
    </item>
    <item>
      <title>Docker Cheatsheet - Basic</title>
      <link>/core/docker/cheatsheet-basic/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/cheatsheet-basic/</guid>
      <description>Get Information docker --version docker info docker images ls docker container ls -all Container docker run [OPTIONS] IMAGE [COMMAND] [ARGS...] -d --detach Most common options
option default description -d, &amp;ndash;detach run in background -e, &amp;ndash;env set environment varialbes, e.g. -e MYVAR=foo -e VAR1 &amp;ndash;env-file read env vars from a file &amp;ndash;expose expose a port or a range of ports -h,&amp;ndash;hostname container host name -i,&amp;ndash;interactive keep stdin open even if not attached -l,&amp;ndash;label set meta data on a container &amp;ndash;name assign a name to the container -p,&amp;ndash;pulish publish a container&amp;rsquo;s port(s) to the host, e.</description>
    </item>
    <item>
      <title>My docker that runs hugo</title>
      <link>/web/hugo/my-hugo-docker/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/web/hugo/my-hugo-docker/</guid>
      <description>Setup Run By default the script runhugo
accept a list of folder as toplevel content section clean target folder generate the site and watch the input folder to updte Example
$ hugo.sh -h hugo.sh [options] [project1 [project2 ...]] launch hugo in a container, should run from WSL/Linux -h help -y dry run -i interactive shell -w path work folder (/home/jasonz/myhub) -c file configuration yaml file -v map-list path mapping (e.g. lpath:dpath [-v lp2:dp2]) -t path publish target folder (/mnt/c/myhub/site) -b path base url -g publish for github.</description>
    </item>
    <item>
      <title>Some Docker Images On hub.docker.com</title>
      <link>/core/docker/hub-img/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/hub-img/</guid>
      <description>My List klakegg/hugo latest de97b1ae4b16 3 weeks ago 44.2MB (0.63.1) alpine latest 965ea09ff2eb 4 months ago 5.55MB node lts-alpine3.10 8d20833f510f 3 weeks ago 84.9MB (12.14.1) node lts 98a2c7c96ac3 5 days ago 914MB centos 6 d0957ffdf8a2 11 months ago 194MB centos latest 9f38484d220f 11 months ago 202MB debian 9-slim b805107aed7b 11 months ago 55.3MB debian latest 0af60a5c6dd0 11 months ago 101MB walkero/node-vuecli latest 8ac98d2b7f9a 11 months ago 189MB anapsix/alpine-java latest c45785c254c5 12 months ago 126MB maven alpine 7445f83cd169 9 months ago 122MB python alpine a1cd5654cf3c 12 days ago 109MB (3.</description>
    </item>
    <item>
      <title>Hugo SSG on Docker</title>
      <link>/web/hugo/hugo-on-docker/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/web/hugo/hugo-on-docker/</guid>
      <description>Hugo Docker docker pull klakegg/hugo:ext-apline # 17mb Build docker run --rm -it -v $(pwd):/src -v $(pwd)/output:/target klakegg/hugo:ext-alpine Run Server docker run --rm -it -v $(pwd):/src -p 1313:1313 klakegg/hugo:ext-alpine Compose Shell docker run --rm -it -v $(pwd):/src klakegg/hugo:ext-alpine shell Configuration Environment variables:
HUGO_BIND - Bind address for server. Default: 0.0.0.0 HUGO_DESTINATION - Location of output folder. Default: /target HUGO_PANDOC - Pandoc command to be triggered. Default: pandoc-default HUGO_ENV - Selecting environment (&amp;ldquo;DEV&amp;rdquo;/&amp;ldquo;production&amp;rdquo;).</description>
    </item>
    <item>
      <title>Bind-mount a Local Folder on Windows</title>
      <link>/core/docker/mount/bind-mount-win/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/mount/bind-mount-win/</guid>
      <description>The Docker container supports mounting a host folder to a container mount point
docker run -v host_paht:container_path [ other options ] However you can&amp;rsquo;t mount a folder other than C:/Users and its sub-folders on Windows/OSX, like this
docker run -v d:/my-path:/my-mount ... Docker on Windows/OSX is implemented through a virtual machine (docker-machine), so the host path is actually the path on the docker-machine, not the host that runs docker.
To mount an arbitary host folder to the docker container, the host folder has to be accessible by the docker machine, and expressed in the format of docker machine.</description>
    </item>
    <item>
      <title>Make Toolchains with Docker</title>
      <link>/core/docker/mk-tool-chain/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/mk-tool-chain/</guid>
      <description>Task Requirement We need a centos5 container with following packages:
gcc44 and g++44 that can build both 64 and 32 bit app python2.7 with PyYAML module perl 5.8+ Tips The latest open-ssl (e.g. v1.1.1 at write time) is not supported by old distro (e.g. centos5), so it is wise to download (src) modules into the working folder before running docker build instead of doing so in Dockerfile if openssl is used (e.</description>
    </item>
    <item>
      <title>Run glibc Applications on Alpine</title>
      <link>/core/docker/alpine-glibc/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/core/docker/alpine-glibc/</guid>
      <description>The Problem Alpine is musl-based, however most existing applications are glibc-based. Rebuilding everything with musl is an ideal and clean solution, but that be not practical (e.g. sources/dependencies are not availalbe) or not economical (e.g. not enough resources or in a tight schedule) or other reasons.
Let&amp;rsquo;s face it, alpine/musl is good (size, security, &amp;hellip;) but we still need to run glibc-apps on alpine.
There are bunch of solutions already:</description>
    </item>
  </channel>
</rss>
