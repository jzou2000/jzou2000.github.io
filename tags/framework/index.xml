<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>framework on My Hugo</title>
    <link>/tags/framework/</link>
    <description>Recent content in framework on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building Your Own Plugin Framework</title>
      <link>/core/c&#43;&#43;/plugin-framework/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/plugin-framework/</guid>
      <description>source Dr.Dobb&amp;rsquo;s Building Your Own Plugin Framework
Building Your Own Plugin Framework: Part 1 By Gigi Sayfan, November 25, 2007
This article is the first in a series of articles that discuss the architecture, development, and deployment of a C/C++ cross-platform plugin framework. This first installment explores the terrain, surveys (briefly) several existing plugin/component libraries, delves into the binary compatibility problem, and presents some desirable properties of the solution.
Subsequent articles showcase an industrial strength plugin framework that you can use on Windows, Linux, Mac OS X, and easily port to other operating systems.</description>
    </item>
  </channel>
</rss>
