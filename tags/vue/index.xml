<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on My Hugo</title>
    <link>/tags/vue/</link>
    <description>Recent content in vue on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue App Quick Start</title>
      <link>/web/vue/vue-quick-start/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>/web/vue/vue-quick-start/</guid>
      <description>First Vue Project created by vue-cli init, with webpack
$ vue init webpack my-p0 A newer version of vue-cli is available. latest: 2.9.6 installed: 2.8.2 ? Project name my-p0 ? Project description My first vue project created by vue-init ? Author Jason Zou &amp;lt;jzou2000@gmail.com&amp;gt; ? Vue build standalone ? Install vue-router? Yes ? Use ESLint to lint your code? Yes ? Pick an ESLint preset Standard ? Set up unit tests Yes ?</description>
    </item>
    <item>
      <title>Minimal Setup A Vue App Project</title>
      <link>/web/vue/vue-app-min/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      <guid>/web/vue/vue-app-min/</guid>
      <description>Pre-request Have vue-cli installed
npm install @vue/cli -g Create Project vue create prj-name The default preset (babel, eslint) installes 178MB. with route/vuex 183MB
Start run/development
npm run serve common modules vue add router vue add vuex Configure You don&amp;rsquo;t need to config and the boilplate just works. However if you do need extra configuration, create vue.config.js at project root folder.
module.exports = { // configures go here devServer: { proxy: &amp;#39;http://localhost:8088&amp;#39;, // alternatively, if you have multiple APIs // or fine-tune url pattern // proxy: { // &amp;#39;api-url&amp;#39;: { // target: &amp;#39;http://localhost:8088&amp;#39;, // ws: true, // also websockets // changeOrigin: true, // }, // &amp;#39;other-api-url: {.</description>
    </item>
    <item>
      <title>Accessing DOM from a Vue App</title>
      <link>/web/vue/vue-access-dom/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      <guid>/web/vue/vue-access-dom/</guid>
      <description>Although it is more preferable to use virtual-DOM for exchanging data between UI components and model in a Vue-based application, accessing DOM elements directly is still required in some special cases:
using 3rd-party libraries (e.g. green-sock for animation) You can still use standard DOM access method
var el = document.getElementById(&amp;#39;el-name&amp;#39;) Vue offers a convenient way to do this work
&amp;lt;!-- any tags as well --&amp;gt; &amp;lt;div ref=&amp;#39;myref&amp;#39; other-attributes &amp;gt; &amp;lt;/div&amp;gt; new Vue({ //.</description>
    </item>
    <item>
      <title>Vue</title>
      <link>/web/vue/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>/web/vue/</guid>
      <description> vue vue-cli vite vuex pinia </description>
    </item>
  </channel>
</rss>
