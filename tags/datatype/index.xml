<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>datatype on My Hugo</title>
    <link>/tags/datatype/</link>
    <description>Recent content in datatype on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/datatype/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JDBC Data Types</title>
      <link>/core/db/jdbc/jdbc-data-type/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/jdbc/jdbc-data-type/</guid>
      <description>JDBC Data Types java.sql.Types name value ARRAY 2003 BIGINT -5 BINARY -2 BIT -7 BLOB 2004 BOOLEAN 16 CHAR 1 CLOB 2005 DATALINK 70 DATE 91 DECIMAL 3 DISTINCT 2001 DOUBLE 8 FLOAT 6 INTEGER 4 JAVA_OBJECT 2000 LONGNVARCHAR -16 LONGVARBINARY -4 LONGVARCHAR -1 NCHAR -15 NCLOB 2011 NULL 0 NUMERIC 2 NVARCHAR -9 OTHER 1111 REAL 7 REF 2006 ROWID -8 SMALLINT 5 SQLXML 2009 STRUCT 2002 TIME 92 TIMESTAMP 93 TINYINT -6 VARBINARY -3 VARCHAR 12 </description>
    </item>
    <item>
      <title>ODBC Data Types</title>
      <link>/core/db/odbc/odbc-data-type/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/core/db/odbc/odbc-data-type/</guid>
      <description>ODBC Data Types SQL Types name value SQL_CHAR 1 SQL_VARCHAR 12 SQL_LONGVARCHAR -1 SQL_WCHAR -8 SQL_WVARCHAR -9 SQL_WLONGVARCHAR -10 SQL_DECIMAL 3 SQL_NUMERIC 2 SQL_BIT -7 SQL_TINYINT -6 SQL_SMALLINT 5 SQL_INTEGER 4 SQL_BIGINT -5 SQL_FLOAT 6 SQL_DOUBLE 8 SQL_REAL 7 SQL_BINARY -2 SQL_VARBINARY -3 SQL_LONGVARBINARY -4 SQL_DATE 9 SQL_TIME 10 SQL_TIMESTAMP 11 SQL_TYPE_DATE 91 SQL_TYPE_TIME 92 SQL_TYPE_TIMESTAMP 93 SQL_GUID -11 SQL_INTERVAL_YEAR 101 SQL_INTERVAL_MONTH 102 SQL_INTERVAL_DAY 103 SQL_INTERVAL_HOUR 104 SQL_INTERVAL_MINUTE 105 SQL_INTERVAL_SECOND 106 SQL_INTERVAL_YEAR_TO_MONTH 107 SQL_INTERVAL_DAY_TO_HOUR 108 SQL_INTERVAL_DAY_TO_MINUTE 109 SQL_INTERVAL_DAY_TO_SECOND 110 SQL_INTERVAL_HOUR_TO_MINUTE 111 SQL_INTERVAL_HOUR_TO_SECOND 112 SQL_INTERVAL_MINUTE_TO_SECOND 113 SQL C Types name value SQL_C_CHAR 1 SQL_C_WCHAR -8 SQL_C_NUMERIC 2 SQL_C_BIT -7 SQL_C_TINYINT -6 SQL_C_STINYINT -26 SQL_C_UTINYINT -28 SQL_C_SHORT 5 SQL_C_SSHORT -15 SQL_C_USHORT -17 SQL_C_LONG 4 SQL_C_SLONG -16 SQL_C_ULONG -18 SQL_C_SBIGINT -25 SQL_C_UBIGINT -27 SQL_C_FLOAT 7 SQL_C_DOUBLE 8 SQL_C_BINARY -2 SQL_C_DATE 9 SQL_C_TIME 10 SQL_C_TIMESTAMP 11 SQL_C_TYPE_DATE 91 SQL_C_TYPE_TIME 92 SQL_C_TYPE_TIMESTAMP 93 SQL_C_GUID -11 SQL_C_INTERVAL_YEAR 101 SQL_C_INTERVAL_MONTH 102 SQL_C_INTERVAL_DAY 103 SQL_C_INTERVAL_HOUR 104 SQL_C_INTERVAL_MINUTE 105 SQL_C_INTERVAL_SECOND 106 SQL_C_INTERVAL_YEAR_TO_MONTH 107 SQL_C_INTERVAL_DAY_TO_HOUR 108 SQL_C_INTERVAL_DAY_TO_MINUTE 109 SQL_C_INTERVAL_DAY_TO_SECOND 110 SQL_C_INTERVAL_HOUR_TO_MINUTE 111 SQL_C_INTERVAL_HOUR_TO_SECOND 112 SQL_C_INTERVAL_MINUTE_TO_SECOND 113 C Type Identifier vs C Types C type identifier ODBC C typedef C type SQL_C_CHAR SQLCHAR * unsigned char * SQL_C_WCHAR SQLWCHAR * wchar_t * SQL_C_SSHORT SQLSMALLINT short int SQL_C_USHORT SQLUSMALLINT unsigned short int SQL_C_SLONG SQLINTEGER long int SQL_C_ULONG SQLUINTEGER unsigned long int SQL_C_FLOAT SQLREAL float SQL_C_DOUBLE SQLDOUBLE, SQLFLOAT double SQL_C_BIT SQLCHAR unsigned char SQL_C_STINYINT SQLSCHAR signed char SQL_C_UTINYINT SQLCHAR unsigned char SQL_C_SBIGINT SQLBIGINT _int64[h] SQL_C_UBIGINT SQLUBIGINT unsigned _int64[h] SQL_C_BINARY SQLCHAR * unsigned char * SQL_C_BOOKMARK BOOKMARK unsigned long int[d] SQL_C_VARBOOKMARK SQLCHAR * unsigned char * C structures Note: size on Windows</description>
    </item>
    <item>
      <title>casting</title>
      <link>/core/c&#43;&#43;/casting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/casting/</guid>
      <description>solaris issue app.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include &amp;lt;iostream&amp;gt; using namespace std; template &amp;lt;class T&amp;gt; void foo(const T&amp;amp; v1, const T&amp;amp; v2, const char* msg) { cout &amp;lt;&amp;lt; &amp;#34;v1=&amp;#34; &amp;lt;&amp;lt; v1 &amp;lt;&amp;lt; &amp;#34;, v2=&amp;#34; &amp;lt;&amp;lt; v2 &amp;lt;&amp;lt; &amp;#34;, msg=&amp;#34; &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; endl; } template &amp;lt;class T&amp;gt; void bar(T v1, T v2, const char* msg) { cout &amp;lt;&amp;lt; &amp;#34;v1=&amp;#34; &amp;lt;&amp;lt; v1 &amp;lt;&amp;lt; &amp;#34;, v2=&amp;#34; &amp;lt;&amp;lt; v2 &amp;lt;&amp;lt; &amp;#34;, msg=&amp;#34; &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; endl; } template &amp;lt;class T&amp;gt; void ptr(T* v1, T* v2, const char* msg) { cout &amp;lt;&amp;lt; &amp;#34;v1=&amp;#34; &amp;lt;&amp;lt; *v1 &amp;lt;&amp;lt; &amp;#34;, v2=&amp;#34; &amp;lt;&amp;lt; *v2 &amp;lt;&amp;lt; &amp;#34;, msg=&amp;#34; &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; endl; } int main() { cout &amp;lt;&amp;lt; &amp;#34;start&amp;#34; &amp;lt;&amp;lt; endl; unsigned fail = 0; cout &amp;lt;&amp;lt; &amp;#34;&amp;amp;fail=&amp;#34; &amp;lt;&amp;lt; &amp;amp;fail &amp;lt;&amp;lt; endl; foo(static_cast&amp;lt;unsigned&amp;gt;(1), fail, &amp;#34;this is a test ref&amp;#34;); bar(static_cast&amp;lt;unsigned&amp;gt;(1), fail, &amp;#34;this is a test val&amp;#34;); ptr(&amp;amp;fail, &amp;amp;fail, &amp;#34;this is a test ptr&amp;#34;); cout &amp;lt;&amp;lt; &amp;#34;end&amp;#34; &amp;lt;&amp;lt; endl; return 0; } with gcc 4.</description>
    </item>
  </channel>
</rss>
