<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debug on My Hugo</title>
    <link>/tags/debug/</link>
    <description>Recent content in debug on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/debug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using DBX to Debug</title>
      <link>/core/c&#43;&#43;/debug/dbx-aix/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/dbx-aix/</guid>
      <description>A Typical Session Tips (dbx) help disable disable &amp;lt;status-number&amp;gt; disable all The traces or stops corresponding to the given numbers are disabled. The numbers associated with traces and stops can be printed with the &amp;#34;status&amp;#34; command. (dbx) help display &amp;lt;address&amp;gt; , &amp;lt;address&amp;gt; / [&amp;lt;mode&amp;gt;] [&amp;gt; &amp;lt;filename&amp;gt;] &amp;lt;address&amp;gt; / [&amp;lt;count&amp;gt;] [&amp;lt;mode&amp;gt;] [&amp;gt; &amp;lt;filename&amp;gt;] &amp;lt;address&amp;gt; / (&amp;lt;expression&amp;gt;) [&amp;lt;mode&amp;gt;] [&amp;gt; &amp;lt;filename&amp;gt;] &amp;lt;address&amp;gt; = [&amp;lt;mode&amp;gt;] [&amp;gt;&amp;lt;filename&amp;gt;] Display contents of memory starting at the first &amp;lt;address&amp;gt; up to the second &amp;lt;address&amp;gt; or until &amp;lt;count&amp;gt; items are printed.</description>
    </item>
    <item>
      <title>Shared Object Miscelleous</title>
      <link>/core/c&#43;&#43;/debug/shared-object-debug/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/shared-object-debug/</guid>
      <description>It is well known that LD_LIBRARY_PATY is used to specified the search paths for shared objects (dynamically loaded libraries, equivalent to DLL on Windows). However there are other environment varaibles that are also useful.
LD_DEBUG Let&amp;rsquo;s say an application app will load some shared objects. Set LD_DEBUG=help shows the usage of this variable.
export LD_DEBUG=help $ app Valid options for the LD_DEBUG environment variable are: libs display library search paths reloc display relocation processing files display progress for input file symbols display symbol table processing bindings display information about symbol binding versions display version dependencies scopes display scope information all all previous options combined statistics display relocation statistics unused determined unused DSOs help display this help message and exit To direct the debugging output into a file instead of standard output a filename can be specified using the LD_DEBUG_OUTPUT environment variable.</description>
    </item>
    <item>
      <title>Debugging on OSX</title>
      <link>/core/c&#43;&#43;/debug/osx-debug/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/core/c&#43;&#43;/debug/osx-debug/</guid>
      <description>SIP (System Integrity Protection) SIP is introduced in OS X EI Capitan. Turn it off to debug an app. Turn off SIP
Note: On some old version of OSX (e.g. 10.9) extra command is required:
$ sudo /usr/sbin/DevToolsSecurity --enable Password: Developer mode is now enabled. </description>
    </item>
    <item>
      <title>Debug Python Script With Pdb</title>
      <link>/core/python/debug-with-pdb/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/core/python/debug-with-pdb/</guid>
      <description>Just like gdb is still used for C/C++ programmer, pdb is still useful although we have many IDE tools like pycharm or vs-code. Gdb/pdb sometimes is the only choice in on-site environment when more advanced tools are not available or allowed.
Enable/Start pdb python -m pdb your_script.py Common Commands Command Description c(ont(inue)) continue w(here) print stack trace (reversed) b(reak) [fln|func[,condition]] set break point, fln=file:line, break without args lists all breakpoints tbreak &amp;hellip; temporary break cl(ear) [fln|bp#]&amp;hellip; clear breakpoint, all without args s(tep) step in n(ext) next unt(il) until line or out of current frame r(eturn) until the current frame p expr print expr pp expr print using pprint ** See full-list below.</description>
    </item>
  </channel>
</rss>
