<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Npm on My Hugo</title>
    <link>/web/js/npm/</link>
    <description>Recent content in Npm on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/web/js/npm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Common Usage</title>
      <link>/web/js/npm/usage/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/usage/</guid>
      <description>Update npm itself npm install -g npm Update all installed packages npm update Install/Uninstall a package npm install install @vue/cli -g npm uninstall @vue/cli -g -g global List Packages npm ls --depth=0 -g &amp;ndash;depth=0 list only toplevel package tree -g global </description>
    </item>
    <item>
      <title>Common NPM Modules</title>
      <link>/web/js/npm/common-modules/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/common-modules/</guid>
      <description>Modules and Size Method
create folder, edit package.json for the specified module run npm update run du -sh . Name Size Description express+axios 3.7M mini web framework + promise based http client better-sqlite3 23M The fastest and simplest library for SQLite3 in Node.js. fast-xml-parser 372k Validate XML or Parse XML to JS/JSON very fast without C/C++ based libraries js-yaml 1.1M YAML 1.2 parser and serializer markdown-it 1.5M Markdown-it - modern pluggable markdown parser.</description>
    </item>
    <item>
      <title>better-sqlite3</title>
      <link>/web/js/npm/better-sqlite3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/better-sqlite3/</guid>
      <description>better-sqlite3 - the fastest and simplest library for SQLite3 in Node.js. (23M)
Compare to sqlite3 - asynchronous, non-blocking SQLite3 bindings (15M)
Both modules need C binaries.
/* Demo: better-sqlite3 - faster sqlite3 client, using sync API * connect(dsn, {options}) * prepare(sql) * all(params) * run(params) */ const log = console.log const bs3 = require(&amp;#39;better-sqlite3&amp;#39;) const argv = process.argv.slice(2) var dbname = argv.length &amp;gt; 1 ? argv[0] : &amp;#39;mylite.db&amp;#39; const db = bs3(dbname, {}) var r = db.</description>
    </item>
    <item>
      <title>commander.js</title>
      <link>/web/js/npm/commander/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/commander/</guid>
      <description>Commander.js is the complete solution for node.js command-line interfaces, inspired by Ruby&amp;rsquo;s commander. 0 dependencies. (112K)
// demonstrate the usage of commander, which parse command-line arguments // const log = console.log const str = function(o, tight) { return tight ? JSON.stringify(o) : JSON.stringify(o, null, 2) } const opt = new (require(&amp;#39;commander&amp;#39;)).Command() opt.description(&amp;#39;Demonstate the usage of commander&amp;#39;) // optional .version(&amp;#39;0.1.2&amp;#39;) // optional, -V or --version .option(&amp;#39;-o, --onion&amp;#39;, &amp;#39;add onion&amp;#39;) // default onion=undefined .</description>
    </item>
    <item>
      <title>express &#43; axios</title>
      <link>/web/js/npm/express&#43;axios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/express&#43;axios/</guid>
      <description>Mini web framework + promise based http client, 3.7M
// A very simple httpd based on express // that servers static htmls at d:/www var path = require(&amp;#39;path&amp;#39;) var express = require(&amp;#39;express&amp;#39;) var bodyParser = require(&amp;#39;body-parser&amp;#39;) var app = express() app.use(bodyParser.json()) app.use(bodyParser.urlencoded({extended: true})) const fs = require(&amp;#39;fs&amp;#39;) const yaml = require(&amp;#39;js-yaml&amp;#39;) const sqlite = require(&amp;#39;better-sqlite3&amp;#39;) const tslite = require(&amp;#39;./tslite&amp;#39;) const ux = require(&amp;#39;./utilx&amp;#39;) const nedb = require(&amp;#39;nedb&amp;#39;) app.use(express.static(&amp;#39;exel&amp;#39;)) //app.use(&amp;#39;/public&amp;#39;, express.static(&amp;#39;public&amp;#39;)) var log = console.</description>
    </item>
    <item>
      <title>fast-xml-parser</title>
      <link>/web/js/npm/fast-xml-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/fast-xml-parser/</guid>
      <description>fast-xml-parser validates XML or parse XML to JS/JSON very fast without C/C++ based libraries (372K)
Alternatives are:
xml2js - simple XML to JavaScript object converter (2.0M) sax - a pure javascript sax parser node-expat - libexpat (binary) node.js bind const fs = require(&amp;#39;fs&amp;#39;) const fxp = require(&amp;#39;fast-xml-parser&amp;#39;) const log = console.log const argv = process.argv.slice(2) const fname = argv[0] const encoding = argv.length &amp;gt; 1 ? argv[1] : &amp;#39;utf8&amp;#39; fs.promises .</description>
    </item>
    <item>
      <title>iconv-lite</title>
      <link>/web/js/npm/iconv-lite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/iconv-lite/</guid>
      <description>This script opens a file stream and detect the encoding. const log = console.log const fs = require(&amp;#39;fs&amp;#39;) const iconv = require(&amp;#39;iconv-lite&amp;#39;) const args = process.argv.slice(2) const fname = args[0] || &amp;#39;sample.txt&amp;#39; var encoding = args[1] log(`fname=${fname} encoding=${encoding}`) // show upto 16 items of data or 33 characters if data is string function show_data(data, title) { log(`${title}: length=${data.length}`) if (typeof data === &amp;#39;string&amp;#39;) { log(` ${data.slice(0, 33)}`) } else {</description>
    </item>
    <item>
      <title>js-levenshtein</title>
      <link>/web/js/npm/js-levenshtein/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/js-levenshtein/</guid>
      <description>Calculate levenshtein distance between two strings.
/* Demo: usage of js-levenshtein */ const log = console.log const levenshtein = require(&amp;#39;js-levenshtein&amp;#39;) log(levenshtein(&amp;#39;kitten&amp;#39;, &amp;#39;sitting&amp;#39;)) log(levenshtein(&amp;#39;./APITests/TestSets/TestCases/SQLAllocHandlE.xml&amp;#39;, &amp;#39;./APITests/TestSets/3.xTestCases/SQLAllocHandle.xml&amp;#39;)) /* output 3 4 */ </description>
    </item>
    <item>
      <title>js-yaml</title>
      <link>/web/js/npm/js-yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/js-yaml/</guid>
      <description>js-yaml - YAML 1.2 parser and serializer (1.1M).
/* Demonstrate js-yaml (yaml implemented by js) usage usage: node yaml-load.js [yaml_file_name] */ const jsyaml = require(&amp;#39;js-yaml&amp;#39;) const log = console.log const argv = process.argv.slice(2) log(`argv=${argv}`) if (argv &amp;lt; 1) { // no file specified, use embedded sample var fdat = ` name: sample list: [1, 2, 3] string: | hello world ` } else { var fs = require(&amp;#39;fs&amp;#39;) var fdat = fs.</description>
    </item>
    <item>
      <title>markdonw-it &#43; highlight.js</title>
      <link>/web/js/npm/markdown-it&#43;highlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/markdown-it&#43;highlight/</guid>
      <description>markdown-it - modern pluggable markdown parser (1.5M).
highlight.js - syntax highlighting with language autodetection. (2.4M) (not highlightjs, which is obsolete already)
/* Demo: usage of markdown-it and highlight.js */ const log = console.log const hljs = require(&amp;#39;highlight&amp;#39;) const md = require(&amp;#39;markdown-it&amp;#39;)({ breaks: true, highlight: function (str, lang) { if (lang &amp;amp;&amp;amp; hljs.getLanguage(lang)) { try { return hljs.highlight(lang, str).value } catch (__) {} } return &amp;#39;&amp;#39; } }) var src = &amp;#39;````c++&amp;#39; + ` #include &amp;lt;iostream&amp;gt; using namespace std; int main(int argc, char** argv) { cout &amp;lt;&amp;lt; &amp;#34;Hello, world&amp;#34; &amp;lt;&amp;lt; endl; return 0; } `+&amp;#39;````&amp;#39; var s = md.</description>
    </item>
    <item>
      <title>nedb</title>
      <link>/web/js/npm/nedb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/nedb/</guid>
      <description>nedb - file-based embedded data store for node.js (4.6M)
/* Demo: nedb - a pure js, mongo-like document database */ const log = console.log; const NeDb = require(&amp;#39;nedb&amp;#39;); var db = new NeDb({ filename: &amp;#39;myne.db&amp;#39;, autoload: true }); function insert_one() { var suite = { name: &amp;#39;api&amp;#39;, desc: &amp;#39;api tests&amp;#39;, sets: [] }; db.insert(suite, (err, doc) =&amp;gt; { log(&amp;#39;inserted&amp;#39;, doc.name, &amp;#39;with ID&amp;#39;, doc._id); }); } function insert_more() { var suites = [ { name: &amp;#39;conv&amp;#39;, desc: &amp;#39;convert tests&amp;#39;, }, { name: &amp;#39;sql&amp;#39;, desc: &amp;#39;sql tests&amp;#39;, }, ]; log(&amp;#39;insert more&amp;#39;); db.</description>
    </item>
    <item>
      <title>sax</title>
      <link>/web/js/npm/sax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/sax/</guid>
      <description>sax - an evented streaming XML parser in JavaScript.
Alternative: node-expat (4.8M) is libexpat node.js bind.
The Basic #! /usr/bin/env node // test app for // sax-js js stream of xml-sax // const fs = require(&amp;#39;fs&amp;#39;) const readline = require(&amp;#39;readline&amp;#39;) const sax = require(&amp;#39;sax&amp;#39;) const parser = sax.createStream(true, {position: true, lowercase: true}) const log = console.log var ctx = { inText: false, text: &amp;#39;&amp;#39;, append (t) { this.inText = true this.</description>
    </item>
    <item>
      <title>socket.io</title>
      <link>/web/js/npm/socket.io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/socket.io/</guid>
      <description>Socket.IO enables real-time bidirectional event-based communication. It consists of:
a Node.js server (this repository) a Javascript client library for the browser (or a Node.js client) </description>
    </item>
    <item>
      <title>npm</title>
      <link>/web/js/npm/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/npm/npm/</guid>
      <description>Webpack Express Socket.io: let’s go to real time! Socket.IO + Express | Our Code World PostgreSQL pg-promise API pg-promise by by example brianc/node-postgres: PostgreSQL client for node.js. SQLite sqlite3 Handlebars.js: Minimal Templating passport.js - Windows Authentication strategy Bower hapi.js Modules mongodb - npm js-yaml - npm better-sqlite3/api.md at master · JoshuaWise/better-sqlite3 nedb: The JavaScript Database, for Node.js, nw.js, electron and the browser Lovefield: The Data Access Library that Loves You xml2js - npm Liquibase | Database Refactoring | Liquibase sax - npm fast-xml-parser - npm Packaging Node.</description>
    </item>
  </channel>
</rss>
