<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on My Hugo</title>
    <link>/web/js/node/</link>
    <description>Recent content in Node.js on My Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/web/js/node/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some Tips of Express.js</title>
      <link>/web/js/node/express-tips/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      <guid>/web/js/node/express-tips/</guid>
      <description>Parsing POST data Start from Express 4.16 app.use(express.json()) app.use(express.urlencode({extended: true})) // app.use(express.multipart()) // security concerns? // URL encoding // POST: name=foo&amp;amp;color=red // or JSON encoding // POST: {&amp;#34;name&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;color&amp;#34;: &amp;#34;red&amp;#34;} app.post(&amp;#39;/url&amp;#39;, (req, res) =&amp;gt; { // your POST data is req.body var name = req.body.name })
Express 4.0 to 4.15 npm install --save body-parser and var body_parser = require(&amp;#39;body-parser&amp;#39;) app.use(body_parser.json()) app.use(body_parser.urlencode({extended: true}))</description>
    </item>
    <item>
      <title>Package a node.js application into a single binary</title>
      <link>/web/js/node/node-pkg/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/web/js/node/node-pkg/</guid>
      <description>install npm install pkg -g pkg --help usage cd project pkg -o output-file -t ${nodev}-linux,${nodev}-win entry.js using assets </description>
    </item>
    <item>
      <title>Create An HTTPS Web Server With Express.js</title>
      <link>/web/js/node/https-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/node/https-express/</guid>
      <description>References:
Create HTTPS Server with Node.js [Simple Steps] use self cerificate Node, Express, SSL Certificate: Run HTTPS Server from scratch in 5 steps Use free certificate authority Let&amp;rsquo;s Encrypt create key/cert jasonz@VANLWIN0056:~/codex/ssl/key1$ openssl genrsa -out key.pem Generating RSA private key, 2048 bit long modulus (2 primes) .........+++++ .........+++++ e is 65537 (0x010001) jasonz@VANLWIN0056:~/codex/ssl/key1$ ls key.pem jasonz@VANLWIN0056:~/codex/ssl/key1$ head -5 key.pem -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAqkp2E9lwT6HMmxMwh6LkJeFTGy3vnMhzeqhE9gOFKa8Wbblb U4cgJs1Qf+ifBQxWf6baf4d84GXxJ0x89QQuq8uujiD6bppC5cLmjOnK6ad673ft Iigj4TWSS3wEPGUbvmEIELSIVfRiuiI6rYiSLcVP2nkjZJEOyL7JLrzQm5KiIbiM NSaSnevKbyd6caWN0GFyLK8MaHHWco8gH370balMewVKcOyBolox4KmbKsyhiCce jasonz@VANLWIN0056:~/codex/ssl/key1$ jasonz@VANLWIN0056:~/codex/ssl/key1$ openssl req -new -key key.</description>
    </item>
    <item>
      <title>fswalk</title>
      <link>/web/js/node/fswalk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/web/js/node/fswalk/</guid>
      <description>Note the 2nd version (async generator) is prefered: more concise, flexible, and easier to understand.
Old school version Plain style of ancient language feature, although promise is used.
// // fswalk // a promise that walks a tree asynchrously with optional filter (RE pattern), // resolved with a list of {name, stat} // const fs = require(&amp;#39;fs&amp;#39;) const path = require(&amp;#39;path&amp;#39;) // to disable warnings like // (node:6988) ExperimentalWarning: The fs.</description>
    </item>
  </channel>
</rss>
